#pragma once

// 
// Secure kernel definitions
// This file is auto-generated by sk_definitions.py script
// Do not edit this file manually
// Generated on: 2023-06-14 07:58:12
//


//--------------------------------------------------------------------------------
// Error categories

#define SK_ERROR_CATEGORY_NONE (0)
#define SK_ERROR_CATEGORY_SYSTEM (1)
#define SK_ERROR_CATEGORY_APPLICATION (2)
#define SK_ERROR_CATEGORY_INPUT (3)
#define SK_ERROR_CATEGORY_MEMORY (4)
#define SK_ERROR_CATEGORY_FILE (5)
#define SK_ERROR_CATEGORY_STORE (6)
#define SK_ERROR_CATEGORY_MTLS (7)
#define SK_ERROR_CATEGORY_TX (8)
#define SK_ERROR_CATEGORY_CERT (9)
#define SK_ERROR_CATEGORY_SESSION (10)

//--------------------------------------------------------------------------------
// Generic errors

// Generic error (SK_ERROR_CATEGORY_APPLICATION)
#define SK_ERROR_FAILED ((uint32_t)(0xE23EDB62))
// Invalid state (SK_ERROR_CATEGORY_APPLICATION)
#define SK_ERROR_INVALID_STATE ((uint32_t)(0x8D11D7A2))
// Buffer overflow (SK_ERROR_CATEGORY_APPLICATION)
#define SK_ERROR_BUFFER_OVERFLOW ((uint32_t)(0xEB9CAF82))
// Invalid parameter (SK_ERROR_CATEGORY_APPLICATION)
#define SK_ERROR_INVALID_PARAMETER ((uint32_t)(0xA9DE4A22))

//--------------------------------------------------------------------------------
// Secure store errors

// SQLite error (SK_ERROR_CATEGORY_STORE)
#define SK_ERROR_SQLITE ((uint32_t)(0xDD7A0216))

//--------------------------------------------------------------------------------
// MBED TLS errors

// MBED TLS generic error (SK_ERROR_CATEGORY_MTLS)
#define SK_ERROR_MBEDTLS ((uint32_t)(0x9A1B7B47))

//--------------------------------------------------------------------------------
// SKRandom errors

// Random error (SK_ERROR_CATEGORY_SYSTEM)
#define SK_ERROR_RND ((uint32_t)(0x71A90461))

//--------------------------------------------------------------------------------
// Transaction list errors

// Transaction list error (SK_ERROR_CATEGORY_TX)
#define SK_ERROR_TX_LIST ((uint32_t)(0xA8FAA618))
// Invalid chacksum (SK_ERROR_CATEGORY_TX)
#define SK_ERROR_TX_CHKS ((uint32_t)(0xF996EFC8))
// Failed to verify signature (SK_ERROR_CATEGORY_TX)
#define SK_ERROR_TX_SIGN ((uint32_t)(0xB4FFD768))
// Invalid amount/balance in secure store (SK_ERROR_CATEGORY_TX)
#define SK_ERROR_TX_AMNT ((uint32_t)(0xE0BA9518))
// Invalid timestamp in secure store (SK_ERROR_CATEGORY_TX)
#define SK_ERROR_TX_TIME ((uint32_t)(0xFD157E98))
// invalid data padding in secure store (SK_ERROR_CATEGORY_TX)
#define SK_ERROR_TX_PADD ((uint32_t)(0xDDFBB028))

//--------------------------------------------------------------------------------
// Certificate errors

// Failed to parse certificate (SK_ERROR_CATEGORY_CERT)
#define SK_ERROR_CERT_PARSE ((uint32_t)(0x713CF4C9))
// Certificate revocation list parse error (SK_ERROR_CATEGORY_CERT)
#define SK_ERROR_CRL_PARSE ((uint32_t)(0x9EE7AFC9))
// Certificate chain verification failed (SK_ERROR_CATEGORY_CERT)
#define SK_ERROR_CERT_VERIFY ((uint32_t)(0xBF1FF569))
// Signature verification failed (SK_ERROR_CATEGORY_CERT)
#define SK_ERROR_CERT_SIGN ((uint32_t)(0xA80BB669))

//--------------------------------------------------------------------------------
// Online state machine errors

// Invalid online state (SK_ERROR_CATEGORY_APPLICATION)
#define SK_ERROR_ONLINE_INVALID_STATE ((uint32_t)(0x9B6A5822))
// Invalid new transaction state (SK_ERROR_CATEGORY_SESSION)
#define SK_ERROR_ONLINE_NEWTX_STATE ((uint32_t)(0xC9A5943A))

//--------------------------------------------------------------------------------
// Session related errors

// Store already exists (SK_ERROR_CATEGORY_SESSION)
#define SK_ERROR_STORE_EXISTS ((uint32_t)(0xEE39C73A))
// Invalid provisioning data (SK_ERROR_CATEGORY_SESSION)
#define SK_ERROR_INVALID_PROV_DATA ((uint32_t)(0xBDC0AE4A))

//--------------------------------------------------------------------------------
// P2P related errors

// Invalid P2P message (SK_ERROR_CATEGORY_SESSION)
#define SK_ERROR_P2P_MSG ((uint32_t)(0xE9D392AA))

//--------------------------------------------------------------------------------
// Constants


//--------------------------------------------------------------------------------
// Boolean values

// False value
#define SK_FALSE ((uint32_t)(0xCDD57461))
// True value
#define SK_TRUE ((uint32_t)(0xB1CBD91D))

//--------------------------------------------------------------------------------
// Common state mahine states

// Reset state
#define SK_ST_RESET ((uint32_t)(0xBA500ADB))
// Invalid state
#define SK_ST_INVALID ((uint32_t)(0xFC3AFB84))
// Done state
#define SK_ST_DONE ((uint32_t)(0xFEE246D4))

//--------------------------------------------------------------------------------
// Online state mahine states

// Reset state
#define SK_ST_ONLINE_RESET ((uint32_t)(0x88A0D4E5))
// Done state
#define SK_ST_ONLINE_DONE ((uint32_t)(0xB40B131B))
// Init state
#define SK_ST_ONLINE_INIT ((uint32_t)(0xEB374AEB))
// Waiting for ECDH server response
#define SK_ST_ONLINE_SRV_RESP ((uint32_t)(0x85B56A13))
// Waiting for ECDH server response with balance initialization
#define SK_ST_ONLINE_SRV_RESP_BALANCE ((uint32_t)(0xDA11CCE8))
// Waiting for transaction upload server response
#define SK_ST_ONLINE_TX_RESP ((uint32_t)(0xAD0CC313))
// Waiting for TUID request server response
#define SK_ST_ONLINE_TUID_RESP ((uint32_t)(0x82BFF40A))

//--------------------------------------------------------------------------------
// Provisioning state mahine states

// Reset state
#define SK_ST_PROV_RESET ((uint32_t)(0xCDD647AD))
// Done state
#define SK_ST_PROV_DONE ((uint32_t)(0xADCB7490))
// Init state
#define SK_ST_PROV_INIT ((uint32_t)(0xED135005))
// Waiting for ECDH server response
#define SK_ST_PROV_SRV_RESP ((uint32_t)(0x7BD44521))
// Waiting for provisioning parameters
#define SK_ST_PROV_PARAMS ((uint32_t)(0x8A96CE35))

//--------------------------------------------------------------------------------
// Offline P2P payor (sender) state mahine states

// Reset state
#define SK_ST_P2PS_RESET ((uint32_t)(0xBD96EAEF))
// Done state
#define SK_ST_P2PS_DONE ((uint32_t)(0xA4E53581))
// Init state
#define SK_ST_P2PS_INIT ((uint32_t)(0xDDE56F76))
// Waiting for counterparty ECDH response
#define SK_ST_P2PS_RESP ((uint32_t)(0xD84EB183))
// Waiting for counterparty receipt
#define SK_ST_P2PS_RCPT ((uint32_t)(0xFD2280A7))

//--------------------------------------------------------------------------------
// Offline P2P payee (receiver) state mahine states

// Reset state
#define SK_ST_P2PR_RESET ((uint32_t)(0x9D2FFDFD))
// Done state
#define SK_ST_P2PR_DONE ((uint32_t)(0xA6A94604))
// Init state
#define SK_ST_P2PR_INIT ((uint32_t)(0xC477C3CC))
// Waiting for counterparty ECDH parameters
#define SK_ST_P2PR_PARAMS ((uint32_t)(0xE6CFE869))
// Waiting for counterparty transaction data
#define SK_ST_P2PR_TXDATA ((uint32_t)(0x71236FC4))
// Waiting for receipt acknowledgement
#define SK_ST_P2PR_ACK ((uint32_t)(0xE8314188))

//--------------------------------------------------------------------------------
// Provisioning conastants


// Shared IV for provisioning parameters encryption
#define SK_PROV_SHARED_IV { \
0xCF, 0xEA, 0x57, 0x50, 0x66, 0x52, 0xAC, 0x55, 0x29, 0x8E, 0xBC, 0x5E, 0xFB, 0x2D, 0x5E, 0x8E, \
}

// Size
#define SK_PROV_SHARED_IV_SIZE (16)

// Mask
#define SK_PROV_SHARED_IV_MASK { \
0xCB, 0xBA, 0xD4, 0x06, 0xBA, 0x0C, 0x74, 0x3A, 0xE0, 0x75, 0x4A, 0xD7, 0x0A, 0xA4, 0xE3, 0x0D, \
}

// Checksum
#define SK_PROV_SHARED_IV_CSUM { \
0x10, 0x67, 0x8C, 0x8B, 0x08, 0x3E, 0x15, 0xA7, 0x6D, 0x58, 0xE9, 0xDF, 0xDC, 0x59, 0xEE, 0xBE, \
0x07, 0xDA, 0x3B, 0xC7, 0x4D, 0xD1, 0xF6, 0xA0, 0x18, 0x52, 0xFB, 0xD7, 0x6A, 0x7C, 0x1A, 0x52, \
}


//--------------------------------------------------------------------------------
// Offline P2P payor constants


// Shared IV for shared key establishement
#define SK_P2P_SHARED_IV { \
0x99, 0x4B, 0x97, 0x92, 0x23, 0xEC, 0x16, 0xAA, 0x85, 0xD6, 0x7C, 0x25, 0xC5, 0xAA, 0x86, 0xB7, \
}

// Size
#define SK_P2P_SHARED_IV_SIZE (16)

// Mask
#define SK_P2P_SHARED_IV_MASK { \
0x8F, 0xB1, 0xF7, 0xF3, 0x4E, 0x8C, 0x58, 0x4A, 0x6A, 0x5C, 0x01, 0x27, 0xF9, 0x75, 0x86, 0x5E, \
}

// Checksum
#define SK_P2P_SHARED_IV_CSUM { \
0x09, 0x42, 0xB3, 0x3F, 0xFE, 0xC3, 0xBE, 0x16, 0x8B, 0x47, 0xCE, 0xF4, 0xC2, 0xE6, 0x0A, 0x38, \
0x24, 0xBC, 0x46, 0x04, 0xE7, 0x56, 0x8D, 0xE2, 0x97, 0x42, 0xC7, 0x92, 0x74, 0x81, 0xD1, 0xAF, \
}


//--------------------------------------------------------------------------------
// Key types

// No key type
#define SK_CST_KEY_TYPE_NONE ((uint32_t)(0xC685AC24))
// AES-GCM-128 key type
#define SK_CST_KEY_TYPE_AES_GCM_128 ((uint32_t)(0xC461C1EB))
// ECDSA P-256 key type
#define SK_CST_KEY_TYPE_ECDSA_P256 ((uint32_t)(0x72D49463))

//--------------------------------------------------------------------------------
// Secure store related name and data


// Secure store pathname
#define SK_STORE_PATHNAME ((const char*)("./build/CRBHI3BLMPPHCQAM.bin"))
#define SK_STORE_PATHNAME_HEX {0x2E, 0x2F, 0x62, 0x75, 0x69, 0x6C, 0x64, 0x2F, 0x43, 0x52, 0x42, 0x48, 0x49, 0x33, 0x42, 0x4C, 0x4D, 0x50, 0x50, 0x48, 0x43, 0x51, 0x41, 0x4D, 0x2E, 0x62, 0x69, 0x6E, 0x00}
#define SK_STORE_PATHNAME_SIZE (29)

//--------------------------------------------------------------------------------
// Application key store keys

// Application key
#define SK_APP_KEY_SYM ((const char*)("7RJ3067ZMRHVMTOC"))
// Application key
#define SK_APP_KEY_ASYM ((const char*)("KX1UFWP8MSAMTZE1"))

//--------------------------------------------------------------------------------
// MBED TLS crypto static key


// MBED TLS crypto module static key
#define SK_CRYPTO_STATC_KEY { \
0x15, 0xD6, 0xA7, 0xA2, 0x2F, 0x01, 0x67, 0xF3, 0x7E, 0x41, 0x10, 0xE0, 0xB4, 0xF6, 0x97, 0x96, \
}

// Size
#define SK_CRYPTO_STATC_KEY_SIZE (16)

// Mask
#define SK_CRYPTO_STATC_KEY_MASK { \
0x3F, 0x44, 0x20, 0xFC, 0xD8, 0xD9, 0x15, 0xA3, 0xAE, 0x5A, 0x90, 0xE3, 0xBF, 0x1F, 0x10, 0x99, \
}

// Checksum
#define SK_CRYPTO_STATC_KEY_CSUM { \
0xDC, 0x97, 0xDC, 0x70, 0x5A, 0x08, 0xE9, 0x97, 0xF9, 0xAA, 0x68, 0xB8, 0x41, 0x3B, 0x78, 0x4F, \
0x5E, 0xB4, 0xE2, 0xD3, 0x57, 0x64, 0x1B, 0xBB, 0x60, 0xF8, 0x54, 0x8C, 0xF6, 0x83, 0xA3, 0x02, \
}


//--------------------------------------------------------------------------------
// Secure store db keys for PRNG state


// PRNG state
#define SK_DB_PRNG ((const char*)("MO3VRHSGV0AQ95WX"))
#define SK_DB_PRNG_HEX {0x4D, 0x4F, 0x33, 0x56, 0x52, 0x48, 0x53, 0x47, 0x56, 0x30, 0x41, 0x51, 0x39, 0x35, 0x57, 0x58, 0x00}
#define SK_DB_PRNG_SIZE (17)

//--------------------------------------------------------------------------------
// Simulated app key store keys


// Symmetric AES-128 key
#define SK_DB_SYM ((const char*)("C36YGWZ2BYBTEK6O"))
#define SK_DB_SYM_HEX {0x43, 0x33, 0x36, 0x59, 0x47, 0x57, 0x5A, 0x32, 0x42, 0x59, 0x42, 0x54, 0x45, 0x4B, 0x36, 0x4F, 0x00}
#define SK_DB_SYM_SIZE (17)

// Asymmetric ECDSA key
#define SK_DB_ASYM ((const char*)("MRM6DAM4SF1HNEFO"))
#define SK_DB_ASYM_HEX {0x4D, 0x52, 0x4D, 0x36, 0x44, 0x41, 0x4D, 0x34, 0x53, 0x46, 0x31, 0x48, 0x4E, 0x45, 0x46, 0x4F, 0x00}
#define SK_DB_ASYM_SIZE (17)

//--------------------------------------------------------------------------------
// Provisioning related related db keys


// DB key instance ECDSA key pair
#define SK_DB_INST_SIG_KEY ((const char*)("ECESWO9TURE81SZP"))
#define SK_DB_INST_SIG_KEY_HEX {0x45, 0x43, 0x45, 0x53, 0x57, 0x4F, 0x39, 0x54, 0x55, 0x52, 0x45, 0x38, 0x31, 0x53, 0x5A, 0x50, 0x00}
#define SK_DB_INST_SIG_KEY_SIZE (17)

// DB key instance certificate
#define SK_DB_INST_CERT_VAL ((const char*)("K1QA7FP3FJL3RTQ4"))
#define SK_DB_INST_CERT_VAL_HEX {0x4B, 0x31, 0x51, 0x41, 0x37, 0x46, 0x50, 0x33, 0x46, 0x4A, 0x4C, 0x33, 0x52, 0x54, 0x51, 0x34, 0x00}
#define SK_DB_INST_CERT_VAL_SIZE (17)

// DB key instance certificate tag
#define SK_DB_INST_CERT_TAG ((const char*)("A3706UDW1QW0JJAM"))
#define SK_DB_INST_CERT_TAG_HEX {0x41, 0x33, 0x37, 0x30, 0x36, 0x55, 0x44, 0x57, 0x31, 0x51, 0x57, 0x30, 0x4A, 0x4A, 0x41, 0x4D, 0x00}
#define SK_DB_INST_CERT_TAG_SIZE (17)

//--------------------------------------------------------------------------------
// Transaction management related db keys


// Transaction data list head
#define SK_DB_TX_HEAD_VAL ((const char*)("LH1W9TJEQWHNSIJS"))
#define SK_DB_TX_HEAD_VAL_HEX {0x4C, 0x48, 0x31, 0x57, 0x39, 0x54, 0x4A, 0x45, 0x51, 0x57, 0x48, 0x4E, 0x53, 0x49, 0x4A, 0x53, 0x00}
#define SK_DB_TX_HEAD_VAL_SIZE (17)

// Transaction data list head tag
#define SK_DB_TX_HEAD_TAG ((const char*)("BLKIRQUQJNS2LMRC"))
#define SK_DB_TX_HEAD_TAG_HEX {0x42, 0x4C, 0x4B, 0x49, 0x52, 0x51, 0x55, 0x51, 0x4A, 0x4E, 0x53, 0x32, 0x4C, 0x4D, 0x52, 0x43, 0x00}
#define SK_DB_TX_HEAD_TAG_SIZE (17)

// Transaction data list signature
#define SK_DB_TX_SIG_VAL ((const char*)("BINZQRFPW0CY4NH1"))
#define SK_DB_TX_SIG_VAL_HEX {0x42, 0x49, 0x4E, 0x5A, 0x51, 0x52, 0x46, 0x50, 0x57, 0x30, 0x43, 0x59, 0x34, 0x4E, 0x48, 0x31, 0x00}
#define SK_DB_TX_SIG_VAL_SIZE (17)

// Transaction data list signature tag
#define SK_DB_TX_SIG_TAG ((const char*)("E14PCC4PRJNQLBXA"))
#define SK_DB_TX_SIG_TAG_HEX {0x45, 0x31, 0x34, 0x50, 0x43, 0x43, 0x34, 0x50, 0x52, 0x4A, 0x4E, 0x51, 0x4C, 0x42, 0x58, 0x41, 0x00}
#define SK_DB_TX_SIG_TAG_SIZE (17)

// Transaction data list signature
#define SK_DB_TX_TMP_VAL ((const char*)("I7GRF5NVXQC99I6O"))
#define SK_DB_TX_TMP_VAL_HEX {0x49, 0x37, 0x47, 0x52, 0x46, 0x35, 0x4E, 0x56, 0x58, 0x51, 0x43, 0x39, 0x39, 0x49, 0x36, 0x4F, 0x00}
#define SK_DB_TX_TMP_VAL_SIZE (17)

// Transaction data list signature tag
#define SK_DB_TX_TMP_TAG ((const char*)("JSKDBQ23VIF8TFN1"))
#define SK_DB_TX_TMP_TAG_HEX {0x4A, 0x53, 0x4B, 0x44, 0x42, 0x51, 0x32, 0x33, 0x56, 0x49, 0x46, 0x38, 0x54, 0x46, 0x4E, 0x31, 0x00}
#define SK_DB_TX_TMP_TAG_SIZE (17)

// Application instance IUD (certificate hash)
#define SK_DB_TX_IUID_VAL ((const char*)("ADNDJTEDNT5TP2AQ"))
#define SK_DB_TX_IUID_VAL_HEX {0x41, 0x44, 0x4E, 0x44, 0x4A, 0x54, 0x45, 0x44, 0x4E, 0x54, 0x35, 0x54, 0x50, 0x32, 0x41, 0x51, 0x00}
#define SK_DB_TX_IUID_VAL_SIZE (17)

// Application instance IUD tag
#define SK_DB_TX_IUID_TAG ((const char*)("AE7Z5N97GGD07W6L"))
#define SK_DB_TX_IUID_TAG_HEX {0x41, 0x45, 0x37, 0x5A, 0x35, 0x4E, 0x39, 0x37, 0x47, 0x47, 0x44, 0x30, 0x37, 0x57, 0x36, 0x4C, 0x00}
#define SK_DB_TX_IUID_TAG_SIZE (17)

// DB key for data persistence key
#define SK_DB_TX_PER_KEY ((const char*)("G5L4NH9IPGO493PA"))
#define SK_DB_TX_PER_KEY_HEX {0x47, 0x35, 0x4C, 0x34, 0x4E, 0x48, 0x39, 0x49, 0x50, 0x47, 0x4F, 0x34, 0x39, 0x33, 0x50, 0x41, 0x00}
#define SK_DB_TX_PER_KEY_SIZE (17)

// DB key for transaction data cipher key
#define SK_DB_TX_ENC_KEY ((const char*)("E9HLK00O9OBGRCWK"))
#define SK_DB_TX_ENC_KEY_HEX {0x45, 0x39, 0x48, 0x4C, 0x4B, 0x30, 0x30, 0x4F, 0x39, 0x4F, 0x42, 0x47, 0x52, 0x43, 0x57, 0x4B, 0x00}
#define SK_DB_TX_ENC_KEY_SIZE (17)

// DB key for transaction list signature key
#define SK_DB_TX_SIG_KEY ((const char*)("HOZD3EXUZCBAX9GQ"))
#define SK_DB_TX_SIG_KEY_HEX {0x48, 0x4F, 0x5A, 0x44, 0x33, 0x45, 0x58, 0x55, 0x5A, 0x43, 0x42, 0x41, 0x58, 0x39, 0x47, 0x51, 0x00}
#define SK_DB_TX_SIG_KEY_SIZE (17)

//--------------------------------------------------------------------------------
// Application key store simulator keys


// Symmetric AES-128 IV
#define SK_APPKEYS_SYM_IV { \
0xBE, 0x1F, 0x02, 0xD4, 0x5B, 0x02, 0x06, 0x0B, 0x5F, 0x46, 0x01, 0x7E, 0x72, 0xD0, 0x65, 0x94, \
}

// Size
#define SK_APPKEYS_SYM_IV_SIZE (16)

// Mask
#define SK_APPKEYS_SYM_IV_MASK { \
0xD2, 0x49, 0x05, 0x1A, 0xE1, 0x22, 0x70, 0xC7, 0x0B, 0x95, 0x3E, 0xBA, 0xC5, 0xB5, 0x4F, 0x05, \
}

// Checksum
#define SK_APPKEYS_SYM_IV_CSUM { \
0xEC, 0x8A, 0x99, 0x0D, 0x6F, 0x6D, 0x92, 0xA2, 0x06, 0x85, 0x4F, 0x5B, 0x74, 0xC4, 0xC3, 0x41, \
0xF4, 0x06, 0xF4, 0x5E, 0xB6, 0xE7, 0x22, 0x47, 0x09, 0x14, 0xC0, 0x34, 0xCB, 0x4E, 0x6B, 0xF5, \
}


// Symmetric AES-128 salt
#define SK_APPKEYS_SYM_SALT { \
0x7A, 0x62, 0x28, 0x19, 0x79, 0x3C, 0x91, 0xC1, 0xD5, 0x1A, 0x19, 0xFE, 0x34, 0xDD, 0x7F, 0xDF, \
}

// Size
#define SK_APPKEYS_SYM_SALT_SIZE (16)

// Mask
#define SK_APPKEYS_SYM_SALT_MASK { \
0xC4, 0xAB, 0xEA, 0x44, 0x4B, 0x52, 0xB0, 0x34, 0xE8, 0x6D, 0xC3, 0xFD, 0xC5, 0xD6, 0x56, 0x4A, \
}

// Checksum
#define SK_APPKEYS_SYM_SALT_CSUM { \
0x35, 0x1F, 0x03, 0x7A, 0x0E, 0x38, 0xFD, 0x58, 0xE0, 0x52, 0xDD, 0x29, 0xC2, 0x56, 0x68, 0x7A, \
0x71, 0x24, 0x95, 0xB6, 0xCB, 0x3C, 0x36, 0x08, 0xDC, 0x1C, 0xC8, 0x13, 0x0A, 0x62, 0x47, 0x9E, \
}


//--------------------------------------------------------------------------------
// Masked constants for AES-GCM encryption


// Unwrap key IV
#define SK_UNWRAP_IV { \
0x24, 0xEC, 0xC7, 0x34, 0x7C, 0x68, 0x04, 0xCA, 0x65, 0xA0, 0x61, 0xE9, 0x42, 0x05, 0xDD, 0x6A, \
}

// Size
#define SK_UNWRAP_IV_SIZE (16)

// Mask
#define SK_UNWRAP_IV_MASK { \
0x9F, 0x9C, 0x89, 0xBB, 0x62, 0xFD, 0x76, 0x99, 0x07, 0xA3, 0xD1, 0x9A, 0x52, 0x72, 0xD1, 0x57, \
}

// Checksum
#define SK_UNWRAP_IV_CSUM { \
0x39, 0x3A, 0xEF, 0x18, 0xC7, 0x9C, 0x58, 0x3B, 0x6E, 0xC7, 0xD6, 0x50, 0x47, 0xAE, 0x5C, 0x22, \
0xDA, 0x98, 0x66, 0xF5, 0xB0, 0x8D, 0x8B, 0x50, 0x78, 0xDA, 0xE4, 0x8C, 0x73, 0x42, 0x60, 0xC1, \
}


// Unwrap key data 
#define SK_UNWRAP_DATA { \
0xF1, 0x8D, 0x15, 0x34, 0xE3, 0x3F, 0xD9, 0x8B, 0x0E, 0xE5, 0xB9, 0x2E, 0x1F, 0x1C, 0xD4, 0xF0, \
0xE9, 0xF8, 0xC4, 0xC7, 0xDB, 0x59, 0x3A, 0xE8, 0x3F, 0x6C, 0x72, 0xDC, 0x4D, 0x5D, 0xB2, 0xDC, \
}

// Size
#define SK_UNWRAP_DATA_SIZE (32)

// Mask
#define SK_UNWRAP_DATA_MASK { \
0xBC, 0x91, 0x52, 0x39, 0x28, 0x1F, 0x41, 0x50, 0xC5, 0x70, 0xA3, 0x49, 0xB5, 0xC9, 0x60, 0x63, \
0xC7, 0xF5, 0x0E, 0xBC, 0x75, 0xFC, 0xF9, 0xB0, 0x2A, 0x56, 0x29, 0xFC, 0xEE, 0xFE, 0xF1, 0x85, \
}

// Checksum
#define SK_UNWRAP_DATA_CSUM { \
0x8A, 0x2D, 0x07, 0xE2, 0x81, 0x43, 0x2F, 0x72, 0xB8, 0x23, 0xDE, 0x33, 0x68, 0xD2, 0x1C, 0x8C, \
0xBC, 0xF6, 0x6F, 0x41, 0x25, 0xFA, 0x81, 0x99, 0x69, 0x8D, 0x32, 0x89, 0x2B, 0x1C, 0xD3, 0xBB, \
}


// Store encrypted value IV
#define SK_STORE_VAL_IV { \
0xA8, 0xF3, 0x39, 0x1C, 0xFC, 0x14, 0x7F, 0x0F, 0xFC, 0x14, 0xDC, 0x93, 0x85, 0x33, 0x8D, 0xDE, \
}

// Size
#define SK_STORE_VAL_IV_SIZE (16)

// Mask
#define SK_STORE_VAL_IV_MASK { \
0x01, 0x96, 0xB7, 0x92, 0xCB, 0xC9, 0xED, 0xAF, 0x7A, 0xA2, 0x1A, 0x31, 0x60, 0x98, 0x4F, 0xDA, \
}

// Checksum
#define SK_STORE_VAL_IV_CSUM { \
0x2B, 0xD7, 0xAA, 0x33, 0xDD, 0x33, 0xA0, 0xF1, 0x6F, 0xA0, 0x03, 0xB3, 0x44, 0x86, 0xA6, 0x70, \
0xB7, 0xFB, 0x45, 0x45, 0x64, 0x17, 0x82, 0xB4, 0x97, 0x61, 0x0A, 0xC6, 0xB1, 0x93, 0x66, 0x15, \
}


// Store encrypted value data
#define SK_STORE_VAL_DATA { \
0x95, 0xF4, 0xDE, 0x63, 0xEE, 0xA4, 0x6C, 0xEA, 0xED, 0xD4, 0xB1, 0xBE, 0x35, 0x18, 0x89, 0x04, \
0x8B, 0x45, 0xB2, 0xD3, 0x17, 0x03, 0xBA, 0x5E, 0x2D, 0x34, 0x53, 0xEB, 0x34, 0xDC, 0x5E, 0x0E, \
}

// Size
#define SK_STORE_VAL_DATA_SIZE (32)

// Mask
#define SK_STORE_VAL_DATA_MASK { \
0xCB, 0xDD, 0x01, 0x73, 0x1E, 0x63, 0x14, 0xB9, 0xD9, 0x77, 0xDD, 0x4C, 0xAE, 0x23, 0xB1, 0xAA, \
0xF7, 0x96, 0x8E, 0xB6, 0x0A, 0x7C, 0x9D, 0xA1, 0xFA, 0x0F, 0x03, 0x68, 0x06, 0xC5, 0x25, 0xD2, \
}

// Checksum
#define SK_STORE_VAL_DATA_CSUM { \
0x39, 0x36, 0x84, 0xB3, 0xC4, 0xD0, 0x73, 0x17, 0x5B, 0x55, 0xE6, 0x9E, 0x2E, 0x7E, 0xAA, 0x6E, \
0xFA, 0x56, 0xA5, 0xF6, 0xA2, 0xC2, 0xA6, 0x75, 0x35, 0x47, 0x33, 0x63, 0x8C, 0xB7, 0x50, 0x27, \
}


// Transaction encryption value IV
#define SK_STORE_TX_IV { \
0xBB, 0xC1, 0x2B, 0x5D, 0xFF, 0x71, 0xB0, 0xB0, 0x55, 0x6F, 0x96, 0xDB, 0x91, 0xA3, 0xC0, 0xC2, \
}

// Size
#define SK_STORE_TX_IV_SIZE (16)

// Mask
#define SK_STORE_TX_IV_MASK { \
0x92, 0xA8, 0xDD, 0x3E, 0x26, 0xAF, 0x64, 0x52, 0x9F, 0x3E, 0xC6, 0x32, 0xCC, 0x54, 0xC7, 0x48, \
}

// Checksum
#define SK_STORE_TX_IV_CSUM { \
0x23, 0xCC, 0x77, 0x1A, 0xB2, 0xCA, 0x09, 0xC8, 0x1B, 0x42, 0x4B, 0x23, 0x52, 0xBE, 0xA4, 0x89, \
0x6D, 0xB2, 0x69, 0x6F, 0x79, 0xF7, 0xBE, 0x8B, 0x30, 0xF4, 0x6F, 0x8A, 0xBF, 0x8D, 0xF8, 0x5B, \
}


// Transaction encryption value data
#define SK_STORE_TX_DATA { \
0x91, 0xC2, 0x20, 0x3D, 0x42, 0x1A, 0x34, 0x9D, 0x4A, 0x95, 0x44, 0x8A, 0xB6, 0xC6, 0x79, 0xE4, \
0xBF, 0xE8, 0xD0, 0x0D, 0x35, 0x25, 0xD0, 0xE8, 0x51, 0x9D, 0x58, 0x60, 0x53, 0xAA, 0x60, 0xC5, \
}

// Size
#define SK_STORE_TX_DATA_SIZE (32)

// Mask
#define SK_STORE_TX_DATA_MASK { \
0xD1, 0x31, 0xE0, 0x6F, 0xB2, 0xDE, 0x91, 0xCB, 0x67, 0xF1, 0x12, 0x02, 0xCD, 0x59, 0x46, 0x62, \
0xE5, 0x44, 0xCB, 0x83, 0xEA, 0xD4, 0xDD, 0x9C, 0xC3, 0xEA, 0xC9, 0x94, 0x44, 0x39, 0xFD, 0x2F, \
}

// Checksum
#define SK_STORE_TX_DATA_CSUM { \
0xE7, 0xFC, 0x5B, 0x4D, 0x1C, 0x5A, 0x0A, 0xED, 0x55, 0x54, 0xD7, 0x10, 0x48, 0x72, 0xEB, 0x16, \
0x44, 0x25, 0x6A, 0x4B, 0x12, 0x48, 0xC2, 0x81, 0x41, 0xA2, 0xEA, 0x3D, 0x0D, 0x72, 0x10, 0x87, \
}


//--------------------------------------------------------------------------------
// Root certificate


// Root certificate
#define SK_ROOT_CERT { \
0xE4, 0xA4, 0x92, 0xEB, 0xC2, 0xD4, 0x5F, 0x9F, 0x9E, 0x64, 0xC7, 0xA2, 0x4E, 0x2A, 0x0F, 0x82, \
0xA2, 0xF8, 0xFF, 0x91, 0xA6, 0x0C, 0x79, 0x86, 0x1C, 0xF7, 0x8C, 0x32, 0xCF, 0x36, 0x46, 0x44, \
0x5C, 0xC8, 0x7F, 0x32, 0xF0, 0xCA, 0xD9, 0x64, 0xB5, 0x91, 0x87, 0xD3, 0xD6, 0xB3, 0x57, 0xB1, \
0x33, 0x26, 0xCD, 0x13, 0x05, 0x9C, 0x20, 0x66, 0xB0, 0xEB, 0x8F, 0xB0, 0x0F, 0xBE, 0xD3, 0xB3, \
0x90, 0x01, 0xED, 0xE5, 0xC2, 0x27, 0xA8, 0x32, 0xBB, 0xAB, 0x2F, 0x41, 0xC2, 0x03, 0xA2, 0x61, \
0x86, 0xD4, 0xAA, 0x80, 0x4B, 0xCE, 0x8E, 0xA4, 0x03, 0xFD, 0x10, 0x0B, 0x13, 0x51, 0xA1, 0xC0, \
0x40, 0x9A, 0x32, 0xF2, 0x77, 0xE0, 0x02, 0x1A, 0x34, 0xA4, 0x42, 0xA6, 0xD5, 0x92, 0xFC, 0xD1, \
0xAA, 0x0B, 0x64, 0x0F, 0xAD, 0xB6, 0x65, 0x5E, 0xE9, 0xC2, 0xCA, 0x6E, 0x2B, 0x18, 0x9D, 0xB1, \
0x68, 0x8A, 0x0A, 0x9F, 0x6D, 0xA3, 0x4A, 0x2B, 0x30, 0xAD, 0x67, 0x25, 0x79, 0x93, 0xD6, 0x9A, \
0x8F, 0xB6, 0xDF, 0x91, 0x51, 0xBF, 0xCF, 0xD0, 0x9B, 0xDA, 0x9A, 0xA8, 0x9D, 0x02, 0x18, 0xA5, \
0x2E, 0xF6, 0x46, 0x93, 0x4E, 0x30, 0x4B, 0xC3, 0x26, 0x20, 0x4E, 0x2A, 0x98, 0xE1, 0xDA, 0xDD, \
0xD0, 0x43, 0x3C, 0xA4, 0x23, 0x15, 0xF2, 0xCC, 0x2E, 0x0D, 0x2C, 0x5E, 0xF5, 0xB2, 0x43, 0x6E, \
0x3F, 0x57, 0xC9, 0x10, 0x58, 0x7B, 0x70, 0x0F, 0xD7, 0xDC, 0x1E, 0xF6, 0x77, 0x75, 0x11, 0xB1, \
0xD5, 0x75, 0x59, 0xC9, 0xC5, 0xD3, 0xF2, 0xEF, 0xC7, 0xD3, 0x69, 0x6E, 0x05, 0x00, 0xE1, 0xFF, \
0x34, 0xC7, 0x9E, 0xD5, 0xDC, 0x1F, 0xF1, 0x83, 0xF0, 0x6B, 0xB5, 0x65, 0xC6, 0x56, 0x78, 0xB1, \
0x56, 0xC3, 0x29, 0xD5, 0xC6, 0x21, 0xAF, 0xA0, 0x73, 0xEE, 0xDD, 0x07, 0x98, 0xAA, 0xB3, 0xC0, \
0x29, 0xD2, 0xB1, 0xEA, 0xE6, 0xC8, 0x3A, 0xD5, 0x13, 0xDD, 0x17, 0x7F, 0x4E, 0x18, 0xF6, 0x6F, \
0xB8, 0x2B, 0x67, 0x99, 0xD5, 0x67, 0xA3, 0x23, 0xE1, 0xCE, 0x5F, 0x75, 0xE8, 0xD2, 0x76, 0x14, \
0x3A, 0x22, 0x52, 0x8E, 0x28, 0x2E, 0x70, 0xA5, 0x7B, 0xC5, 0x37, 0x03, 0xC3, 0x1A, 0x2E, 0x5E, \
0x8A, 0x1F, 0x25, 0xE5, 0xB7, 0x48, 0x60, 0xC5, 0x6A, 0xCE, 0x45, 0x83, 0x32, 0x84, 0xE1, 0xF9, \
0xBF, 0x52, 0xF2, 0x40, 0xCD, 0x4C, 0x40, 0x32, 0xBD, 0xF2, 0xC4, 0x22, 0x03, 0x58, 0x9B, 0x79, \
0x54, 0x6F, 0x8F, 0x95, 0x22, 0xD1, 0xBE, 0xC0, 0xE7, 0x74, 0x6E, 0x58, 0x55, 0x3D, 0x5F, 0x26, \
0x77, 0x83, 0xB5, 0x7D, 0x4F, 0x07, 0x6E, 0x72, 0xA2, 0xD2, 0xDD, 0x54, 0x37, 0x48, 0xFB, 0x8C, \
0x27, 0xED, 0xC5, 0x57, 0x05, 0x83, 0x2B, 0x32, 0x52, 0xF0, 0xA5, 0x68, 0x0A, 0x5F, 0xF0, 0x8C, \
0x8B, 0x18, 0x97, 0x04, 0x22, 0x36, 0xD6, 0x9D, 0xB6, 0x05, 0x47, 0x4D, 0xE9, 0xA0, 0x11, 0xDA, \
0xE2, 0x97, 0xAD, 0x31, 0x0A, 0x70, 0x61, 0xD4, 0xDB, 0xE5, 0x2B, 0x4A, 0x49, 0xA6, 0xD2, 0x77, \
0x06, 0x34, 0x03, 0xD1, 0xBD, 0x73, 0xEA, 0xAE, 0xDD, 0xA4, 0xF7, 0x9C, 0x79, 0x8A, 0xEB, 0xB9, \
0x58, 0xC0, 0x25, 0xB0, 0x02, 0xF9, 0x08, 0x52, 0x84, 0xC1, 0xD3, 0xC2, 0xC5, 0xBE, 0x9B, 0x5B, \
0xCF, 0xCC, 0xCC, 0x3B, 0xE0, 0x5F, 0xA3, 0xFA, 0x83, 0x93, 0xA5, 0x96, 0xB1, 0x85, 0x20, 0xF8, \
0x9F, 0xCB, 0xDA, 0x2E, 0xD3, 0x94, 0xBD, 0xB5, 0x3E, 0x4E, 0xFE, 0xE6, 0x6A, 0xBB, 0x24, 0xBC, \
0xBD, 0x4A, 0xD5, 0x61, 0x33, 0xD9, 0xCF, 0x95, 0x21, 0x92, 0x22, 0xBC, 0xB0, 0x54, 0x85, 0x4B, \
0x8D, 0x13, 0x04, 0x55, 0x8F, 0xF7, 0x21, 0xC4, 0x41, 0xBD, 0x9B, 0xAF, 0x16, 0x6A, 0xBF, 0x1F, \
0xF8, 0x63, 0xA5, 0x8C, 0x76, 0xE2, 0x0B, 0xDF, 0xBC, 0x14, 0x34, 0x3A, 0xDA, 0xB3, 0x8C, 0x75, \
0xA6, 0x2B, 0xF1, 0x14, 0x33, 0x68, 0x6C, 0x88, 0x48, 0x64, 0xD7, 0x3F, 0xBE, 0x06, 0xC3, 0xC5, \
0x39, 0x0B, 0x7F, 0xE0, 0x2D, 0x09, 0xDC, 0x11, 0xE6, 0x18, 0x58, 0xDA, 0x1A, 0x91, 0xF3, 0xB2, \
0x63, 0xFF, 0xE4, 0x5C, 0x70, 0x31, 0xCC, 0x74, 0xF2, 0x5D, 0x93, }

// Size
#define SK_ROOT_CERT_SIZE (571)

// Mask
#define SK_ROOT_CERT_MASK { \
0xD4, 0x26, 0x90, 0xDC, 0xF2, 0x56, 0x5E, 0x42, 0x3E, 0x67, 0xC5, 0xA3, 0x4C, 0x28, 0x1B, 0xE3, \
0xD4, 0x86, 0x76, 0x4D, 0xDF, 0xEE, 0x7D, 0x20, 0x55, 0x3F, 0xCF, 0x34, 0x28, 0xAE, 0xD2, 0x44, \
0xE9, 0xF0, 0xBA, 0x02, 0xFA, 0xCC, 0xD1, 0x4E, 0x33, 0xD9, 0x49, 0xEE, 0xD2, 0xB0, 0x55, 0x81, \
0xB2, 0xB6, 0xFC, 0x18, 0x35, 0x95, 0x26, 0x65, 0xE5, 0xEF, 0x89, 0xA3, 0x0D, 0xFD, 0x92, 0x82, \
0x9B, 0x31, 0xE4, 0xE3, 0xC1, 0x72, 0xAC, 0x3A, 0xB7, 0xA9, 0x60, 0x0F, 0xF3, 0x0C, 0x92, 0x6C, \
0x80, 0xD7, 0xFF, 0x84, 0x4C, 0xC2, 0x88, 0xEB, 0x77, 0x89, 0x71, 0x7C, 0x72, 0x60, 0x85, 0xF0, \
0x62, 0x9C, 0x31, 0xA7, 0x73, 0xEA, 0x0E, 0x01, 0x77, 0xE6, 0x06, 0xE5, 0xF5, 0xD4, 0x95, 0xBF, \
0xDE, 0x6E, 0x07, 0x67, 0x8D, 0xE4, 0x00, 0x2D, 0x8C, 0xA3, 0xB8, 0x0D, 0x43, 0x38, 0xDA, 0xC3, \
0x07, 0xFF, 0x7A, 0xAE, 0x70, 0x93, 0x51, 0x2D, 0x33, 0xF8, 0x63, 0x26, 0x75, 0x87, 0x95, 0xDB, \
0xA2, 0xF5, 0x9D, 0xD5, 0x12, 0x92, 0x89, 0x99, 0xD5, 0x8E, 0xDF, 0xEB, 0xD5, 0x2F, 0x4A, 0xEA, \
0x61, 0xA2, 0x77, 0x8D, 0x7E, 0x2C, 0x4D, 0xCA, 0x0C, 0xA6, 0x06, 0xAC, 0x6F, 0xEC, 0xDB, 0xD4, \
0xD1, 0x55, 0x33, 0xC7, 0x41, 0x71, 0x91, 0xE1, 0x48, 0x64, 0x42, 0x2A, 0x90, 0xD1, 0x2B, 0x40, \
0x5C, 0x36, 0xF9, 0x0E, 0x4F, 0x76, 0x42, 0x3C, 0xE7, 0xE9, 0x2E, 0xC5, 0x46, 0x42, 0x20, 0x87, \
0xE1, 0x4C, 0x03, 0xDE, 0xC8, 0xE0, 0xC1, 0xDF, 0xF3, 0xE0, 0x59, 0x5F, 0x32, 0x31, 0xD7, 0xCB, \
0x0D, 0x9D, 0xAE, 0x54, 0x4C, 0x2E, 0xFA, 0xB3, 0xF9, 0x6D, 0xB6, 0x30, 0xC2, 0x50, 0x6B, 0xB3, \
0x15, 0x82, 0x18, 0xDE, 0xF6, 0x28, 0xA9, 0xA3, 0x26, 0xEA, 0xD5, 0x0B, 0x9A, 0xE5, 0xFD, 0xF1, \
0x26, 0xE2, 0xBC, 0xEC, 0xE5, 0x9D, 0x3E, 0xD2, 0x1F, 0xDB, 0x58, 0x0B, 0x3A, 0x79, 0x81, 0x0E, \
0x89, 0x0F, 0x57, 0xBB, 0xD3, 0x64, 0xF6, 0x27, 0xEB, 0xC2, 0x44, 0x36, 0xAA, 0x96, 0x35, 0x34, \
0x7C, 0x4B, 0x3C, 0xFA, 0x4D, 0x4D, 0x18, 0x85, 0x29, 0xA0, 0x44, 0x66, 0xA2, 0x68, 0x4D, 0x36, \
0xAA, 0x58, 0x57, 0x8A, 0xC2, 0x38, 0x51, 0xD8, 0x5A, 0xD5, 0x43, 0x80, 0x67, 0x80, 0xE2, 0xF5, \
0xAB, 0x11, 0xB3, 0x6D, 0x8E, 0x0E, 0x04, 0x71, 0x90, 0xB4, 0x8D, 0x6C, 0x57, 0x1D, 0xD8, 0x31, \
0x79, 0x3D, 0xC0, 0xDA, 0x76, 0xE0, 0xA0, 0xF0, 0xFB, 0x72, 0x67, 0x72, 0xD3, 0x75, 0xD9, 0xD1, \
0x7A, 0x82, 0xBC, 0x7C, 0x59, 0x08, 0x0D, 0x10, 0xC6, 0xB1, 0xF0, 0x32, 0x5E, 0x26, 0x8F, 0xE9, \
0x44, 0x85, 0xEB, 0x34, 0x64, 0xB3, 0x72, 0x02, 0x41, 0xF6, 0xA2, 0x42, 0x8C, 0x17, 0x3E, 0xB1, \
0x89, 0x19, 0x91, 0x0C, 0x08, 0xB0, 0x9E, 0x53, 0x8B, 0x06, 0x46, 0x4A, 0xEA, 0xE2, 0x11, 0xDE, \
0xEB, 0x2D, 0x4B, 0x68, 0x90, 0x4F, 0xAD, 0xBE, 0x5A, 0x6B, 0x73, 0x61, 0xB9, 0x1F, 0x27, 0x4D, \
0x03, 0x30, 0x5D, 0xE0, 0x13, 0xF2, 0x14, 0x7B, 0x6B, 0xC1, 0xCA, 0xD6, 0x8B, 0x8B, 0x7D, 0x35, \
0xD5, 0x95, 0x40, 0x16, 0xEB, 0x3A, 0x46, 0xFB, 0xB5, 0x43, 0x8C, 0x08, 0xC6, 0x60, 0x8C, 0xDB, \
0x57, 0x0B, 0x17, 0xF5, 0x2D, 0x48, 0xD5, 0x13, 0xAB, 0x66, 0x87, 0x47, 0xA5, 0x45, 0xDB, 0x6B, \
0x3C, 0xD8, 0xEA, 0x3F, 0xE3, 0x9B, 0xBB, 0xB6, 0x6B, 0x53, 0xED, 0xE7, 0x6B, 0x44, 0x20, 0xB9, \
0x8D, 0x49, 0xD4, 0x60, 0xCC, 0xE9, 0xC5, 0x93, 0x29, 0xB8, 0xA4, 0xF4, 0x7E, 0x69, 0x81, 0x48, \
0x8F, 0x10, 0x4C, 0x55, 0xBF, 0xB2, 0x23, 0xE5, 0x41, 0x7A, 0x6C, 0x57, 0xBC, 0x66, 0x9A, 0x9F, \
0x8A, 0x82, 0xFF, 0x62, 0xA5, 0x02, 0x6B, 0xF0, 0xE9, 0x99, 0x39, 0x43, 0x2F, 0x95, 0xE8, 0xD9, \
0xC9, 0x97, 0x09, 0x76, 0xEA, 0x4F, 0xDE, 0x95, 0x76, 0x66, 0xF7, 0x56, 0x34, 0x0A, 0x78, 0x8B, \
0xB0, 0x3E, 0x7E, 0x34, 0x1C, 0x83, 0x0C, 0xC0, 0x05, 0xC5, 0xD5, 0xC8, 0x4F, 0xDB, 0x80, 0x01, \
0x78, 0x00, 0x52, 0x81, 0x08, 0x17, 0x2F, 0x7E, 0x89, 0xA3, 0xDB, }

// Checksum
#define SK_ROOT_CERT_CSUM { \
0xDB, 0x81, 0xCD, 0x81, 0x97, 0x38, 0xDE, 0x63, 0x54, 0x60, 0xBA, 0xFD, 0x39, 0x22, 0x71, 0xC3, \
0xC6, 0xFE, 0xD0, 0x16, 0xB8, 0xA7, 0xBA, 0x33, 0x05, 0x22, 0x74, 0x9C, 0x8C, 0x48, 0x57, 0x14, \
}


//--------------------------------------------------------------------------------
// Backend certificate


// Backend certificate
#define SK_BACKEND_CERT { \
0x47, 0x6D, 0x81, 0xCA, 0x46, 0x26, 0x97, 0x1B, 0x92, 0xBC, 0x5C, 0x9F, 0x89, 0x86, 0xB5, 0x9D, \
0x2D, 0xF5, 0x53, 0x3E, 0x8B, 0xE3, 0x10, 0xAF, 0xD4, 0x17, 0x83, 0x69, 0x6F, 0x2B, 0x64, 0x30, \
0x24, 0x47, 0xAE, 0x12, 0xE3, 0xE8, 0x90, 0x86, 0xC0, 0x8D, 0x32, 0x2B, 0x9D, 0x7B, 0xD5, 0x87, \
0xD6, 0x51, 0x4F, 0xE0, 0x26, 0xDC, 0x91, 0xA8, 0x62, 0x0F, 0x7B, 0x3B, 0x3A, 0xFE, 0x56, 0x9B, \
0xB8, 0xA0, 0xA7, 0x54, 0x2A, 0x09, 0x5A, 0xA6, 0xC6, 0xE5, 0x0A, 0xE1, 0xA8, 0x67, 0x2F, 0xB4, \
0xB5, 0xFB, 0x4D, 0x77, 0xA1, 0x42, 0xEA, 0xFC, 0xB8, 0xB4, 0x1E, 0x3A, 0xC5, 0x43, 0xBF, 0x67, \
0x45, 0xD9, 0xAB, 0xBE, 0x2F, 0x7E, 0xAB, 0xCA, 0x38, 0xF8, 0xAD, 0x73, 0x0A, 0x11, 0xB1, 0x4C, \
0xCB, 0x0A, 0xB4, 0x7B, 0x7B, 0x0A, 0xF9, 0x7A, 0xFB, 0x99, 0xA1, 0x7C, 0x2C, 0x29, 0x5C, 0xEF, \
0x54, 0x4A, 0x66, 0xB6, 0x70, 0x76, 0x19, 0xC0, 0x2A, 0xCB, 0x94, 0x47, 0x07, 0xD8, 0x54, 0x08, \
0xE7, 0xED, 0x4F, 0xAF, 0xE7, 0xA9, 0x48, 0x8C, 0xB2, 0x6F, 0x64, 0x5F, 0x3E, 0x2C, 0x93, 0x41, \
0x31, 0xA2, 0x2E, 0x30, 0xAF, 0x83, 0xF9, 0x0B, 0xBC, 0x08, 0xB2, 0xF7, 0x58, 0xAB, 0xEB, 0x59, \
0xBD, 0x0D, 0x79, 0x49, 0xFF, 0x4E, 0xCB, 0x85, 0xE1, 0x85, 0xF7, 0x4C, 0xA8, 0x76, 0xBF, 0x40, \
0x0D, 0xE2, 0x49, 0xD4, 0x92, 0x2A, 0x38, 0x23, 0x71, 0xC4, 0xC9, 0x5A, 0xB5, 0x71, 0x55, 0x71, \
0x63, 0x32, 0x92, 0x19, 0x8C, 0xE9, 0x5E, 0x40, 0xA4, 0xA8, 0xC4, 0x78, 0xB5, 0x89, 0x31, 0x89, \
0x4F, 0x91, 0x9E, 0x26, 0x88, 0x9F, 0x69, 0xEA, 0xE3, 0x84, 0x4F, 0x08, 0x49, 0xF4, 0x6D, 0xF9, \
0x0A, 0x97, 0x27, 0x6F, 0xD8, 0x7E, 0xEE, 0x43, 0xD3, 0xBA, 0x95, 0x13, 0x55, 0x33, 0x42, 0xCE, \
0xAC, 0xF5, 0x40, 0x9A, 0x5B, 0x68, 0x78, 0x2D, 0x9D, 0x24, 0xA9, 0x4B, 0xCC, 0x74, 0x54, 0x46, \
0xDF, 0x39, 0x57, 0x18, 0x88, 0x64, 0x20, 0x68, 0x22, 0x3C, 0x10, 0xBC, 0x67, 0x97, 0x03, 0xD5, \
0x22, 0x74, 0x6D, 0x53, 0xD6, 0x74, 0xAD, 0x18, 0x4D, 0xD0, 0x48, 0xA6, 0x6E, 0x76, 0x82, 0xDC, \
0x65, 0x55, 0xD9, 0xB0, 0xEC, 0xE7, 0xC3, 0xBF, 0xCA, 0xC1, 0x09, 0xE9, 0x53, 0x48, 0x39, 0x22, \
0xF1, 0x72, 0x8F, 0xDD, 0x90, 0x41, 0xF2, 0xD1, 0x86, 0x0B, 0x27, 0x1A, 0x5A, 0xFD, 0x71, 0xA4, \
0xAF, 0xB3, 0xBD, 0xAD, 0x07, 0xA2, 0x73, 0x07, 0xC2, 0x56, 0xFC, 0x3E, 0xF3, 0xA1, 0xB3, 0xAE, \
0xFC, 0xA9, 0x3C, 0x3A, 0x92, 0x1E, 0x3D, 0xBD, 0xCF, 0x58, 0x14, 0xD1, 0xE5, 0x0D, 0xC7, 0xC0, \
0xFE, 0x33, 0x4C, 0x8F, 0x09, 0xE1, 0x32, 0x4E, 0xC6, 0xDE, 0x29, 0x4E, 0x2E, 0x0A, 0x99, 0xD2, \
0x17, 0x73, 0xB9, 0x1F, 0x01, 0x92, 0xCB, 0xE1, 0xCE, 0xC2, 0x5A, 0x37, 0xA5, 0x22, 0xFB, 0x46, \
0xD7, 0x2C, 0x6E, 0x8A, 0xCE, 0x43, 0x95, 0x86, 0x9F, 0xA9, 0x9B, 0xAF, 0xCE, 0x1F, 0x2A, 0x89, \
0x71, 0xA2, 0x4B, 0xD7, 0x06, 0x59, 0x2B, 0x26, 0xB3, 0xB8, 0xE2, 0x2E, 0x76, 0x12, 0x43, 0xDF, \
0x81, 0xD0, 0xB1, 0x4D, 0x04, 0x4D, 0x2C, 0xCA, 0x94, 0xF9, 0xFA, 0xB1, 0xEE, 0x9D, 0x94, 0x96, \
0x65, 0xC3, 0xAE, 0x43, 0x0B, 0x61, 0x72, 0x37, 0x3D, 0x54, 0x2F, 0x27, 0xA3, 0x24, 0x92, 0xC8, \
0x3F, 0x10, 0x1E, 0xD0, 0x0A, 0xE5, 0xE4, 0xF4, 0xBE, 0x32, 0x89, 0x62, 0xCE, 0xFB, 0xA4, 0x78, \
0x93, 0x0A, 0xF6, 0xC5, 0x6A, 0xBA, 0x56, 0x0C, 0x1B, 0xED, 0x66, 0x37, 0x7A, 0xEA, 0x15, 0x45, \
0x34, 0x45, 0xAF, 0xC8, 0x20, 0xE6, 0xBE, 0x78, 0xE9, 0xFE, 0x4D, 0xCC, 0x7C, 0x6A, 0x57, 0x29, \
0xC7, 0x25, 0xB2, 0xC9, 0x30, 0x71, 0x20, 0xB6, 0x66, 0x0B, 0x87, 0x1D, 0x19, 0xB3, 0x25, 0x10, \
0x3E, 0xB2, 0x05, 0x37, 0xA5, 0x0F, 0x03, 0x98, 0x30, 0xCC, 0x2F, 0x24, 0xFF, 0x7F, 0x88, 0xA8, \
0x73, 0xE3, 0x85, 0x8A, 0x82, 0x87, 0x4C, 0x8C, 0xAE, 0x86, 0x91, 0xA4, 0x7D, 0x40, 0xC7, 0xF0, \
0x65, 0x2C, 0xFE, 0xBE, 0x2F, 0xEC, 0xD3, 0xF4, 0x7D, 0x34, 0xB2, 0xC4, 0xE2, }

// Size
#define SK_BACKEND_CERT_SIZE (573)

// Mask
#define SK_BACKEND_CERT_MASK { \
0x77, 0xEF, 0x83, 0xF3, 0x76, 0xA4, 0x96, 0xFB, 0x32, 0xBF, 0x5E, 0x9E, 0x8B, 0x84, 0xA1, 0x86, \
0x80, 0xE9, 0x5F, 0x22, 0xD0, 0xF6, 0xFC, 0xDB, 0x8B, 0x10, 0x00, 0x86, 0x41, 0x87, 0xD5, 0x84, \
0x0F, 0xB4, 0xC3, 0x22, 0xE9, 0xEE, 0x98, 0xAC, 0x46, 0xC5, 0xFC, 0x16, 0x99, 0x78, 0xD7, 0xB7, \
0x57, 0xC1, 0x7E, 0xEB, 0x16, 0xD5, 0x97, 0xAB, 0x37, 0x0B, 0x7D, 0x28, 0x38, 0xBD, 0x17, 0xAA, \
0xB3, 0x90, 0xAE, 0x52, 0x29, 0x5C, 0x5E, 0xAE, 0xCA, 0xE7, 0x45, 0xAF, 0x99, 0x68, 0x1F, 0xB9, \
0xB3, 0xF8, 0x18, 0x73, 0xA6, 0x4E, 0xEC, 0xB3, 0xCC, 0xC0, 0x7F, 0x4D, 0xA4, 0x72, 0x9B, 0x57, \
0x67, 0xDF, 0xA8, 0xEB, 0x2B, 0x74, 0xA7, 0xD1, 0x7B, 0xBA, 0xE9, 0x30, 0x2A, 0x57, 0xD8, 0x22, \
0xBF, 0x6F, 0xD7, 0x13, 0x5B, 0x58, 0x9C, 0x09, 0x9E, 0xF8, 0xD3, 0x1F, 0x44, 0x09, 0x1B, 0x9D, \
0x3B, 0x3F, 0x16, 0x87, 0x6D, 0x46, 0x02, 0xC6, 0x29, 0x9E, 0x90, 0x44, 0x0B, 0xCC, 0x17, 0x49, \
0xCA, 0xAE, 0x0D, 0xEB, 0xA4, 0x84, 0x0E, 0xC5, 0xFC, 0x3B, 0x21, 0x1C, 0x76, 0x01, 0xC1, 0x0E, \
0x7E, 0xF6, 0x1F, 0x2E, 0x9F, 0x9F, 0xFF, 0x02, 0x96, 0x8E, 0xFA, 0x71, 0xAF, 0xA6, 0xEA, 0x50, \
0xBC, 0x1B, 0x76, 0x2A, 0x9D, 0x2A, 0xA8, 0xA8, 0x87, 0xEC, 0x99, 0x38, 0xCD, 0x15, 0xD7, 0x6E, \
0x6E, 0x83, 0x79, 0xCA, 0x85, 0x27, 0x0A, 0x10, 0x41, 0xF1, 0xFB, 0x6E, 0x84, 0x43, 0x64, 0x44, \
0x57, 0x0B, 0xC8, 0x0E, 0x81, 0xDA, 0x6D, 0x70, 0x91, 0x9A, 0xF5, 0x49, 0x87, 0xB8, 0x04, 0xBD, \
0x76, 0xCB, 0xAE, 0xA7, 0x1B, 0xAE, 0x62, 0xDA, 0xEA, 0x82, 0x4C, 0x5D, 0x4D, 0xF2, 0x7E, 0xFB, \
0x49, 0xD6, 0x16, 0x64, 0xE8, 0x77, 0xE8, 0x40, 0x86, 0xBE, 0x9D, 0x1F, 0x57, 0x7C, 0x0C, 0xFF, \
0xA3, 0xC5, 0x4D, 0x9C, 0x58, 0x3D, 0x7C, 0x2A, 0x91, 0x22, 0xE6, 0x3F, 0xB8, 0x15, 0x23, 0x27, \
0xEE, 0x1D, 0x67, 0x3A, 0x8E, 0x67, 0x75, 0x6C, 0x28, 0x30, 0x0B, 0xFF, 0x25, 0xD3, 0x40, 0xF5, \
0x64, 0x1D, 0x03, 0x27, 0xB3, 0x17, 0xC5, 0x38, 0x1F, 0xB5, 0x3B, 0xC3, 0x0F, 0x04, 0xE1, 0xB4, \
0x45, 0x12, 0xAB, 0xDF, 0x99, 0x97, 0xF2, 0x9F, 0xFA, 0xDF, 0x0F, 0xEA, 0x06, 0x4C, 0x3A, 0x2E, \
0xE6, 0x31, 0xCE, 0xF0, 0xD3, 0x03, 0xB6, 0x92, 0xAB, 0x4D, 0x6E, 0x54, 0x0E, 0xB8, 0x32, 0xEC, \
0x82, 0xF1, 0xFC, 0xEE, 0x4C, 0xE7, 0x3D, 0x43, 0xF3, 0x48, 0xCC, 0x22, 0xF5, 0xA8, 0x99, 0x28, \
0xB4, 0x2F, 0xCB, 0x37, 0x93, 0x17, 0x3C, 0xAB, 0xC0, 0x3B, 0x76, 0xB5, 0x86, 0x20, 0xA1, 0xA9, \
0x90, 0x47, 0x29, 0xEC, 0x61, 0xCF, 0x51, 0x2F, 0xF6, 0x87, 0x19, 0x5D, 0x28, 0x0D, 0xB3, 0x54, \
0x5F, 0xBD, 0x84, 0x1D, 0x00, 0x94, 0xC3, 0xCB, 0x48, 0x8A, 0x94, 0x0A, 0xA6, 0x23, 0xFC, 0x45, \
0x95, 0x2C, 0x6A, 0xEF, 0x01, 0x16, 0x61, 0x54, 0x48, 0xA0, 0x4A, 0x59, 0x97, 0xEA, 0x53, 0x00, \
0xF6, 0xDA, 0x94, 0xB5, 0x7C, 0xFC, 0xEF, 0xF7, 0x54, 0x2D, 0x42, 0xF4, 0x3C, 0x32, 0xEC, 0xBB, \
0x8F, 0x77, 0xEA, 0x0B, 0xF7, 0x82, 0xFC, 0xA3, 0xF1, 0x83, 0xAF, 0x6A, 0x8F, 0x12, 0x9F, 0x6C, \
0xB7, 0x2C, 0x31, 0x0B, 0xDF, 0x06, 0xFD, 0xCB, 0x07, 0x3D, 0xD0, 0x74, 0x60, 0x19, 0x8D, 0x50, \
0x10, 0xD0, 0xA0, 0x73, 0x19, 0xD5, 0xF5, 0xC4, 0xB1, 0x34, 0x8A, 0x37, 0xD3, 0xE8, 0xA5, 0x79, \
0x6C, 0x0E, 0xF3, 0xF5, 0x69, 0xBB, 0x57, 0xF3, 0x2B, 0xE7, 0x60, 0x3F, 0x50, 0x6C, 0x5D, 0x8B, \
0x09, 0x41, 0xAC, 0xCA, 0x23, 0xA1, 0xBE, 0x48, 0xAD, 0xFC, 0x6D, 0xEA, 0x91, 0x76, 0xDD, 0xEB, \
0x65, 0x32, 0xF6, 0x07, 0x94, 0x8D, 0xF7, 0x7C, 0x7A, 0x0A, 0x2E, 0xE8, 0xBE, 0xF7, 0xAB, 0xD5, \
0xB6, 0xBE, 0x2B, 0x37, 0x45, 0x32, 0x48, 0x9A, 0xAA, 0xA3, 0xEF, 0x26, 0xDF, 0x2E, 0x33, 0xC6, \
0x5F, 0x65, 0x62, 0x65, 0xEA, 0xBE, 0x89, 0x99, 0x11, 0x6B, 0x9B, 0x20, 0x5C, 0x58, 0x7D, 0xBD, \
0x43, 0x1F, 0xDB, 0x0A, 0x53, 0x17, 0x8E, 0x43, 0xF7, 0x84, 0x02, 0x95, 0xCC, }

// Checksum
#define SK_BACKEND_CERT_CSUM { \
0x98, 0xB2, 0x17, 0xA9, 0x8C, 0x9B, 0xA3, 0xCB, 0x6A, 0x4F, 0x6D, 0x08, 0x6B, 0x93, 0x2E, 0x46, \
0xF9, 0x7E, 0xF0, 0xDA, 0xBB, 0x49, 0xF9, 0x69, 0x65, 0x55, 0xF7, 0xBD, 0x53, 0x53, 0x52, 0x91, \
}


// Backend private key (test only)
#define SK_BACKEND_KEY { \
0xEB, 0x4E, 0xCC, 0x69, 0x15, 0x5C, 0x45, 0x88, 0xB5, 0xE7, 0x20, 0x1D, 0xFF, 0xF5, 0x24, 0x18, \
0xDF, 0x81, 0x16, 0xA7, 0xFB, 0xBD, 0xC5, 0xF5, 0x64, 0xEF, 0x48, 0x1E, 0x1E, 0x87, 0x4B, 0x53, \
0x2D, 0xBD, 0xA1, 0x8E, 0xA0, 0x3B, 0x3F, 0x54, 0x71, 0x38, 0x0E, 0x4E, 0xA9, 0x64, 0xE0, 0x6D, \
0x82, 0x94, 0xEE, 0xCD, 0xA6, 0x4D, 0x39, 0xBF, 0xDA, 0xA5, 0xB7, 0xEA, 0x4D, 0xA8, 0x23, 0x8E, \
0xCD, 0x05, 0x67, 0x2B, 0x3C, 0x21, 0x35, 0x54, 0x32, 0x3D, 0xC2, 0x4D, 0xB9, 0xBD, 0xB0, 0x79, \
0x52, 0x0C, 0x23, 0x8F, 0x67, 0x0E, 0x8E, 0xC8, 0x5D, 0x34, 0xA5, 0x1F, 0x8E, 0x92, 0xFD, 0xD3, \
0x07, 0xFB, 0x76, 0xA3, 0x49, 0xF3, 0x17, 0xB3, 0x50, 0xC9, 0x52, 0x9F, 0xE7, 0x14, 0x67, 0x7E, \
0x73, 0x79, 0x7D, 0xF7, 0x2C, 0x3B, 0xC3, 0xDD, 0x1B, 0xC4, 0xD1, 0x28, 0x93, 0xF7, 0x40, 0x2F, \
0xE4, 0xE8, 0x2A, 0x24, 0x9F, 0x3F, 0x0F, 0xDD, 0x4F, 0xEA, }

// Size
#define SK_BACKEND_KEY_SIZE (138)

// Mask
#define SK_BACKEND_KEY_MASK { \
0xDB, 0xCF, 0x4B, 0x6B, 0x14, 0x5C, 0x75, 0x9B, 0xB3, 0xE0, 0x0A, 0x9B, 0xB7, 0x3B, 0x19, 0x1A, \
0xDE, 0x87, 0x1E, 0x8D, 0x7D, 0xF5, 0x0B, 0xC8, 0x67, 0xEE, 0x4F, 0x1A, 0x73, 0xB7, 0x20, 0x51, \
0x2C, 0xBC, 0xA5, 0xAE, 0xFD, 0x17, 0x18, 0xA3, 0x61, 0xFA, 0x53, 0xBC, 0xDD, 0x5E, 0xD5, 0x01, \
0x98, 0x27, 0x15, 0xE1, 0x0A, 0xE4, 0x3F, 0x1C, 0xBB, 0x29, 0x5F, 0x45, 0xA0, 0x18, 0x11, 0xED, \
0xB8, 0x0D, 0xFD, 0x2F, 0x9D, 0x65, 0x36, 0x16, 0x32, 0x39, 0xA7, 0x82, 0xEC, 0x49, 0x62, 0xAE, \
0x5B, 0xDD, 0xD5, 0xD6, 0x92, 0x77, 0x07, 0x4F, 0x25, 0xEB, 0xC7, 0x65, 0x2B, 0x56, 0x2C, 0x34, \
0x92, 0x5B, 0xAC, 0xE9, 0x69, 0x5C, 0x73, 0xBD, 0xF7, 0x92, 0x14, 0x6C, 0x28, 0xC4, 0x0E, 0x1B, \
0x09, 0x2C, 0xA6, 0x96, 0xA3, 0x30, 0x39, 0x0F, 0xF4, 0x5B, 0x99, 0xFC, 0xF4, 0x78, 0xBC, 0x15, \
0x8D, 0x17, 0x79, 0xE7, 0xA2, 0x20, 0x97, 0xF2, 0x8F, 0x54, }

// Checksum
#define SK_BACKEND_KEY_CSUM { \
0xE9, 0x47, 0x3D, 0xE5, 0x74, 0x43, 0xDA, 0x82, 0x34, 0xD2, 0x49, 0x89, 0xEC, 0xE3, 0x70, 0x70, \
0xF4, 0xE2, 0x14, 0xC7, 0x80, 0xF8, 0x62, 0x38, 0x09, 0xE2, 0x68, 0xFF, 0x04, 0x14, 0xC2, 0x5F, \
}


//--------------------------------------------------------------------------------
// Test related constants


// Symmetric AES-128 key db key for test
#define SK_DB_TEST_SYM ((const char*)("M227RIZ2K1MUXXAG"))
#define SK_DB_TEST_SYM_HEX {0x4D, 0x32, 0x32, 0x37, 0x52, 0x49, 0x5A, 0x32, 0x4B, 0x31, 0x4D, 0x55, 0x58, 0x58, 0x41, 0x47, 0x00}
#define SK_DB_TEST_SYM_SIZE (17)

// BD key for test value
#define SK_DB_TEST_VAL ((const char*)("LQGHYXCI1HJMT56V"))
#define SK_DB_TEST_VAL_HEX {0x4C, 0x51, 0x47, 0x48, 0x59, 0x58, 0x43, 0x49, 0x31, 0x48, 0x4A, 0x4D, 0x54, 0x35, 0x36, 0x56, 0x00}
#define SK_DB_TEST_VAL_SIZE (17)

// BD key for test value tag
#define SK_DB_TEST_TAG ((const char*)("DTL1ATNKOGWCOJA2"))
#define SK_DB_TEST_TAG_HEX {0x44, 0x54, 0x4C, 0x31, 0x41, 0x54, 0x4E, 0x4B, 0x4F, 0x47, 0x57, 0x43, 0x4F, 0x4A, 0x41, 0x32, 0x00}
#define SK_DB_TEST_TAG_SIZE (17)

// List head BD key for test value
#define SK_DB_TEST_HEAD_VAL ((const char*)("DZCBOEPDT4MIH0JQ"))
#define SK_DB_TEST_HEAD_VAL_HEX {0x44, 0x5A, 0x43, 0x42, 0x4F, 0x45, 0x50, 0x44, 0x54, 0x34, 0x4D, 0x49, 0x48, 0x30, 0x4A, 0x51, 0x00}
#define SK_DB_TEST_HEAD_VAL_SIZE (17)

// List head tag BD key for test value tag
#define SK_DB_TEST_HEAD_TAG ((const char*)("FITCEWZXFMYTQWPH"))
#define SK_DB_TEST_HEAD_TAG_HEX {0x46, 0x49, 0x54, 0x43, 0x45, 0x57, 0x5A, 0x58, 0x46, 0x4D, 0x59, 0x54, 0x51, 0x57, 0x50, 0x48, 0x00}
#define SK_DB_TEST_HEAD_TAG_SIZE (17)

// X509 test DER certificate
#define SK_TEST_X509_CERT { \
0xE5, 0x82, 0x98, 0x4F, 0x17, 0x1D, 0xC8, 0x11, 0x4B, 0x2A, 0xC8, 0xB5, 0xA8, 0x18, 0xA3, 0xC6, \
0x13, 0x20, 0xFB, 0x68, 0x4A, 0x25, 0x3C, 0xFE, 0xCD, 0x36, 0xA8, 0x68, 0xCE, 0x23, 0x5E, 0x8C, \
0xD0, 0xEA, 0x5C, 0xD0, 0xF5, 0x0C, 0x58, 0x65, 0x45, 0x52, 0x16, 0x31, 0x08, 0x9B, 0xBE, 0xC7, \
0xDF, 0xEE, 0x44, 0xAB, 0xFC, 0x66, 0x46, 0x2A, 0xE3, 0x30, 0xBC, 0x33, 0xBE, 0xFD, 0xFE, 0x1D, \
0xE8, 0x67, 0xC5, 0xB0, 0xA4, 0x02, 0x22, 0xCB, 0x43, 0xD8, 0x8B, 0xB5, 0xF0, 0xC4, 0x56, 0x4F, \
0xB2, 0x0D, 0x44, 0xA8, 0x54, 0xB1, 0x20, 0x40, 0xAA, 0x6F, 0xE8, 0xE1, 0x69, 0x7C, 0x36, 0xAF, \
0xEE, 0x8C, 0x31, 0x7D, 0xB7, 0x93, 0x9D, 0xF2, 0xDC, 0x35, 0x3B, 0xC2, 0x56, 0x8E, 0x56, 0x81, \
0xF6, 0x88, 0x32, 0x6E, 0x84, 0xE4, 0xC4, 0x3F, 0x6C, 0xBF, 0xB0, 0xC4, 0x93, 0x50, 0xB0, 0x7F, \
0x33, 0xA0, 0x0E, 0xFA, 0x18, 0x42, 0x0B, 0xC0, 0xF9, 0xF8, 0x96, 0x98, 0xE3, 0x37, 0xF3, 0xC4, \
0x75, 0x5D, 0x61, 0x1B, 0x1A, 0x63, 0xC5, 0xC5, 0x3D, 0xCF, 0x11, 0x6B, 0x2C, 0x77, 0xD9, 0x9F, \
0xB2, 0xCE, 0xDC, 0xE6, 0x23, 0xC1, 0x94, 0x91, 0xA1, 0x9D, 0xA4, 0x40, 0xB1, 0x84, 0x01, 0x65, \
0x6C, 0xB3, 0x3C, 0x24, 0x52, 0x26, 0xDC, 0x4E, 0x6F, 0x46, 0x0F, 0x50, 0x01, 0x23, 0xBB, 0x9E, \
0xFF, 0xAB, 0x38, 0xC1, 0x8A, 0x4E, 0x90, 0xAE, 0x0C, 0x44, 0x37, 0x3D, 0x15, 0xF1, 0x26, 0xAF, \
0x0F, 0xBC, 0x78, 0x0E, 0xB2, 0x54, 0x76, 0x76, 0xAD, 0x8D, 0xAD, 0xE7, 0xF7, 0xF2, 0x75, 0xBD, \
0xD7, 0xEF, 0x0A, 0x7A, 0xFA, 0x3E, 0x71, 0x8A, 0x73, 0x16, 0xF4, 0x43, 0x6F, 0xC9, 0x99, 0xB8, \
0xF2, 0x0C, 0xFB, 0x32, 0xC4, 0x22, 0x0C, 0xE3, 0x3F, 0x9C, 0x53, 0x11, 0xB4, 0xC6, 0x69, 0xB2, \
0xDA, 0xC2, 0xCB, 0x76, 0x53, 0xCF, 0x1F, 0x54, 0x35, 0xC4, 0x6F, 0xBD, 0x18, 0xEF, 0x2A, 0x49, \
0xE0, 0x51, 0x58, 0xED, 0xFC, 0xD6, 0x2B, 0x91, 0x58, 0xBF, 0x9C, 0x9A, 0xC2, 0x2F, 0xFC, 0xB4, \
0x67, 0x89, 0x2A, 0x48, 0x53, 0x7F, 0xCD, 0x76, 0x90, 0xE3, 0x89, 0x4C, 0x55, 0x17, 0x67, 0x6B, \
0x49, 0x59, 0x49, 0xC2, 0xA9, 0x52, 0x85, 0x1C, 0x0B, 0x05, 0x49, 0xE8, 0x12, 0x6F, 0x84, 0x6F, \
0x25, 0x6C, 0x7F, 0xDA, 0xA8, 0xD8, 0x44, 0x3E, 0x43, 0x01, 0x42, 0xFE, 0xEC, 0x4C, 0x81, 0x6E, \
0x57, 0x09, 0xD0, 0x31, 0x40, 0x64, 0xBA, 0xB4, 0x13, 0x7D, 0xE1, 0xE2, 0x06, 0xDC, 0x34, 0xEC, \
0x73, 0x1E, 0x0F, 0x7C, 0xA6, 0xCC, 0xDC, 0xDC, 0x0F, 0x3B, 0xAF, 0x49, 0xE7, 0xA8, 0xE9, 0x48, \
0xBC, 0xC1, 0xAF, 0x3F, 0xA7, 0x65, 0x01, 0x42, 0x87, 0xBE, 0x0A, 0x8F, 0x6B, 0x38, 0x44, 0x4F, \
0x9E, 0x49, 0x30, 0x47, 0x55, 0x3D, 0xA1, 0x12, 0xB0, 0x87, 0xB3, 0x26, 0x5A, 0x27, 0x9B, 0xBE, \
0xA2, 0x43, 0x7A, 0x27, 0x12, 0x8A, 0xAC, 0x77, 0xDB, 0x1B, 0xF0, 0x0E, 0x9C, 0xD4, 0x0A, 0x8C, \
0xC4, 0x67, 0xA6, 0xF9, 0x5A, 0x1E, 0x2C, 0xD6, 0x36, 0xFD, 0xF2, 0x07, 0x82, 0x50, 0xBA, 0x8C, \
0xEA, 0x24, 0x8B, 0xDD, 0xEC, 0x7C, 0x4C, 0xE5, 0xA0, 0x77, 0xC6, 0xE5, 0xFE, 0xE5, 0x07, 0x88, \
0xDD, 0xAF, 0x30, 0x7C, 0xC4, 0x60, 0x98, 0x48, 0xE7, 0x67, 0xC1, 0xBE, 0xF2, 0x24, 0xDF, 0x6B, \
0xF5, 0xEA, 0x44, 0x10, 0x4B, 0xD2, 0x19, 0x87, 0x08, 0xB7, 0x32, 0x52, 0x99, 0xF1, 0x1E, 0x12, \
0xBD, 0x16, 0x1E, 0x21, 0x3D, 0x58, 0xE7, 0xB8, 0x1C, 0x99, 0xB9, 0xA9, 0x8B, 0x0C, 0xAE, 0x35, \
0x46, 0x8C, 0x07, 0xF4, 0x0B, 0xA7, 0x77, 0xEA, 0x54, 0x40, 0xD7, 0x85, 0x20, 0x5F, 0xD7, 0x6B, \
0x23, 0x53, 0xC1, 0x5E, 0x5B, 0x8B, 0x46, 0x77, 0x38, 0x97, 0x99, 0x56, 0x25, 0x96, 0xCE, 0x2F, \
0x44, 0x1A, 0x74, 0x06, 0x40, 0x8C, 0x84, 0x4F, 0x08, 0x62, 0x34, 0x82, 0xF5, 0x5B, 0xB1, 0x14, \
0xE4, 0x81, 0x3A, 0x8A, 0xD6, 0x26, 0x46, 0x0E, 0xCA, 0x0C, 0x82, 0x04, 0xB9, 0x17, 0x3A, 0x8F, \
0x3B, 0x97, 0x7F, 0xD3, 0xD9, 0xBD, 0xB1, 0xB0, 0x25, 0xA4, 0x8B, }

// Size
#define SK_TEST_X509_CERT_SIZE (571)

// Mask
#define SK_TEST_X509_CERT_MASK { \
0xD5, 0x00, 0x9A, 0x78, 0x27, 0x9F, 0xC9, 0xCC, 0xEB, 0x29, 0xCA, 0xB4, 0xAA, 0x1A, 0xB7, 0x8C, \
0x2B, 0x17, 0xB0, 0xC3, 0x3B, 0xF3, 0x14, 0x90, 0xC2, 0x26, 0x78, 0x8C, 0x5F, 0x63, 0xF3, 0xBA, \
0x66, 0xD3, 0x56, 0xE0, 0xFF, 0x0A, 0x50, 0x4F, 0xC3, 0x1A, 0xD8, 0x0C, 0x0C, 0x98, 0xBC, 0xF7, \
0x5E, 0x7E, 0x75, 0xA0, 0xCC, 0x6F, 0x40, 0x29, 0xB6, 0x34, 0xBA, 0x20, 0xBC, 0xBE, 0xBF, 0x2C, \
0xE3, 0x57, 0xCC, 0xB6, 0xA7, 0x57, 0x26, 0xC3, 0x4F, 0xDA, 0xC4, 0xFB, 0xC1, 0xCB, 0x66, 0x42, \
0xB4, 0x0E, 0x11, 0xAC, 0x53, 0xBD, 0x26, 0x0F, 0xDE, 0x1B, 0x89, 0x96, 0x08, 0x4D, 0x12, 0x9F, \
0xCC, 0x8A, 0x32, 0x28, 0xB3, 0x99, 0x91, 0xE9, 0x9F, 0x77, 0x7F, 0x81, 0x76, 0xC8, 0x3F, 0xEF, \
0x82, 0xED, 0x51, 0x06, 0xA4, 0xB6, 0xA1, 0x4C, 0x09, 0xDE, 0xC2, 0xA7, 0xFB, 0x70, 0xF7, 0x0D, \
0x5C, 0xD5, 0x7E, 0xCB, 0x05, 0x72, 0x10, 0xC6, 0xFA, 0xAD, 0x92, 0x9B, 0xEF, 0x23, 0xB0, 0x85, \
0x58, 0x1E, 0x23, 0x5F, 0x59, 0x4E, 0x83, 0x8C, 0x73, 0x9B, 0x54, 0x28, 0x64, 0x5A, 0x8B, 0xD0, \
0xFD, 0x9A, 0xED, 0xF8, 0x13, 0xDD, 0x92, 0x98, 0x8B, 0x1B, 0xEC, 0xC6, 0x46, 0x89, 0x00, 0x6C, \
0x6D, 0xA5, 0x33, 0x47, 0x30, 0x42, 0xBF, 0x63, 0x09, 0x2F, 0x61, 0x24, 0x64, 0x40, 0xD3, 0xB0, \
0x9C, 0xCA, 0x08, 0xDF, 0x9D, 0x43, 0xA2, 0x9D, 0x3C, 0x71, 0x05, 0x0E, 0x24, 0xC5, 0x15, 0x9B, \
0x3A, 0x8A, 0x22, 0x19, 0xBF, 0x67, 0x45, 0x46, 0x98, 0xBF, 0x9D, 0xD6, 0xC3, 0xC1, 0x41, 0x88, \
0xE1, 0xB5, 0x3A, 0xFB, 0x6A, 0x0F, 0x7A, 0xBA, 0x7A, 0x10, 0xF7, 0x16, 0x6B, 0xCF, 0x8A, 0xBA, \
0xB1, 0x4D, 0xCA, 0x39, 0xF4, 0x2B, 0x0A, 0xE0, 0x6A, 0x98, 0x5B, 0x1D, 0xB6, 0x89, 0x27, 0x83, \
0xD5, 0xF2, 0xC6, 0x70, 0x50, 0x9A, 0x1B, 0x53, 0x39, 0xC2, 0x20, 0xC9, 0x6C, 0x8E, 0x5D, 0x28, \
0xD1, 0x75, 0x68, 0xCF, 0xFA, 0xD5, 0x7E, 0x95, 0x52, 0xB3, 0x87, 0xD9, 0x80, 0x6B, 0xBF, 0x94, \
0x21, 0xE0, 0x44, 0x3C, 0x36, 0x1C, 0xA5, 0x56, 0xC2, 0x86, 0xFA, 0x29, 0x34, 0x65, 0x04, 0x03, \
0x69, 0x1E, 0x3B, 0xAD, 0xDC, 0x22, 0xB4, 0x01, 0x3B, 0x1E, 0x4F, 0xEB, 0x47, 0x6B, 0x87, 0x63, \
0x31, 0x2F, 0x3E, 0xF7, 0xEB, 0x9A, 0x00, 0x7D, 0x6E, 0x47, 0x0B, 0xB0, 0xB8, 0x09, 0xC2, 0x26, \
0x7A, 0x5D, 0x95, 0x62, 0x14, 0x55, 0xA4, 0x84, 0x0F, 0x7B, 0xE8, 0xC8, 0x80, 0x94, 0xB2, 0x1B, \
0x7E, 0x1F, 0x06, 0x7D, 0xB0, 0xC3, 0xBF, 0xBE, 0x6B, 0x58, 0x82, 0x2F, 0x8E, 0xC6, 0x9D, 0x2D, \
0xDF, 0xA9, 0x81, 0x5C, 0xC6, 0x55, 0x58, 0x72, 0x94, 0xB8, 0x0D, 0xA5, 0xED, 0x70, 0x8A, 0x72, \
0x9C, 0x48, 0x36, 0x4F, 0x7F, 0xBB, 0xE9, 0xDC, 0x8D, 0x84, 0xB2, 0x21, 0x59, 0x65, 0x9B, 0xBA, \
0x5D, 0xE6, 0x67, 0x5B, 0x73, 0xB3, 0x43, 0x16, 0x17, 0x15, 0x54, 0x03, 0x9A, 0x68, 0x8D, 0x7C, \
0x98, 0x21, 0xBA, 0xE6, 0xB2, 0x16, 0x17, 0x95, 0x02, 0x13, 0x5D, 0x31, 0x75, 0x56, 0x8B, 0x4B, \
0x61, 0xC0, 0x82, 0x14, 0x1A, 0xF5, 0x06, 0xE7, 0xB3, 0x62, 0x30, 0xDE, 0xA2, 0x80, 0x11, 0x63, \
0x04, 0x4E, 0x7A, 0x83, 0xB7, 0xB3, 0x28, 0xF8, 0x01, 0x17, 0x43, 0x28, 0x87, 0xE5, 0xDF, 0x71, \
0x56, 0xF9, 0x74, 0x01, 0x7B, 0xDD, 0x1F, 0x84, 0x5D, 0xAA, 0x21, 0x53, 0x98, 0x0E, 0x1A, 0x17, \
0x8D, 0x15, 0x1F, 0x20, 0xC2, 0x68, 0xED, 0xBE, 0x14, 0xB3, 0x3F, 0xE1, 0x45, 0x31, 0xAA, 0x36, \
0x44, 0x8F, 0x4F, 0xF4, 0x3B, 0xE2, 0x75, 0xCB, 0x54, 0x92, 0x54, 0x29, 0xEE, 0xF5, 0x22, 0x14, \
0xEF, 0x49, 0xFC, 0x26, 0xE0, 0xA0, 0x40, 0x7A, 0x06, 0xA5, 0xD4, 0x47, 0xF9, 0x14, 0xAF, 0xB8, \
0x86, 0xF5, 0x2B, 0x94, 0x68, 0x9D, 0x6B, 0x87, 0x4B, 0x60, 0x14, 0xBC, 0x3A, 0x35, 0x54, 0x59, \
0xAC, 0xEF, 0xAD, 0x0B, 0x69, 0x37, 0x81, 0x21, 0x67, 0xCC, 0x30, 0xA7, 0x21, 0xFD, 0x60, 0xE1, \
0x5D, 0x71, 0x55, 0x8C, 0x60, 0xA5, 0xCA, 0x0B, 0xE0, 0x82, 0xEE, }

// Checksum
#define SK_TEST_X509_CERT_CSUM { \
0x69, 0x87, 0x29, 0x7C, 0xCF, 0x7D, 0x44, 0xAF, 0x37, 0x86, 0x5F, 0x4F, 0x9F, 0x8B, 0xCC, 0x6E, \
0xEA, 0x4E, 0xA5, 0x88, 0x31, 0x5A, 0xFA, 0xA6, 0x76, 0x4F, 0x13, 0xA6, 0x33, 0x85, 0x0F, 0x48, \
}


// X509 test DER private key
#define SK_TEST_X509_KEY { \
0x90, 0x90, 0xCF, 0xC4, 0x6D, 0x1B, 0x3A, 0xA5, 0xA1, 0x0B, 0x07, 0x6D, 0xC5, 0xFF, 0x0D, 0x6A, \
0x8A, 0xF3, 0x46, 0xF6, 0x5E, 0x42, 0x08, 0x61, 0x06, 0xEF, 0xF7, 0xB7, 0x7B, 0xFD, 0xD4, 0x42, \
0x50, 0x6A, 0xD2, 0x0D, 0xAD, 0x7F, 0xCD, 0x7B, 0x10, 0x3E, 0xC4, 0x0B, 0x88, 0x95, 0xA1, 0x10, \
0x5B, 0x55, 0x87, 0x21, 0xC4, 0xA9, 0x8D, 0xA9, 0xD6, 0x00, 0xEA, 0xC9, 0x17, 0xA6, 0x0F, 0xA0, \
0xFA, 0x9E, 0xA9, 0xB6, 0xA6, 0x3E, 0x09, 0xE8, 0x05, 0x0B, 0x52, 0x1B, 0x7A, 0x6A, 0x8A, 0x6C, \
0x31, 0x2E, 0x11, 0x5E, 0x19, 0x26, 0xC0, 0xD2, 0x10, 0x8F, 0x4F, 0x76, 0x1E, 0x7E, 0xFD, 0x43, \
0x87, 0xF7, 0x58, 0x9C, 0xEB, 0x1B, 0xF1, 0x10, 0xEA, 0x9A, 0xC3, 0x8C, 0x6D, 0x09, 0x4D, 0x16, \
0x74, 0x98, 0xBD, 0xDC, 0x1C, 0xCF, 0x82, 0x7A, 0x50, 0x15, 0xE5, 0x50, 0x36, 0x44, 0x56, 0x60, \
0x52, 0xE4, 0x93, 0x25, 0xA3, 0x85, 0x9E, 0x22, 0xE6, 0xD4, }

// Size
#define SK_TEST_X509_KEY_SIZE (138)

// Mask
#define SK_TEST_X509_KEY_MASK { \
0xA0, 0x11, 0x48, 0xC6, 0x6C, 0x1B, 0x0A, 0xB6, 0xA7, 0x0C, 0x2D, 0xEB, 0x8D, 0x31, 0x30, 0x68, \
0x8B, 0xF5, 0x4E, 0xDC, 0xD8, 0x0A, 0xC6, 0x5C, 0x05, 0xEE, 0xF0, 0xB3, 0x16, 0xCD, 0xBF, 0x40, \
0x51, 0x6B, 0xD6, 0x2D, 0x8E, 0xEA, 0xA0, 0xB7, 0x45, 0x49, 0xE3, 0xA2, 0xCC, 0x5D, 0x70, 0x67, \
0x93, 0x2F, 0xBB, 0x9A, 0x9F, 0xB3, 0xDE, 0xE0, 0xB0, 0xE6, 0x1A, 0xCD, 0x55, 0x82, 0x25, 0x8F, \
0x0B, 0xD0, 0xCC, 0x99, 0x07, 0x7A, 0x0A, 0xAA, 0x05, 0x0F, 0xAD, 0xBE, 0x67, 0x16, 0xEB, 0x55, \
0xDE, 0x4F, 0xDD, 0x50, 0xBD, 0x2B, 0xC6, 0x6E, 0x97, 0x7F, 0x13, 0x30, 0x02, 0x61, 0x15, 0x4B, \
0xBC, 0xB4, 0x6C, 0x72, 0x44, 0x2D, 0x06, 0x16, 0xDB, 0x5D, 0x48, 0x68, 0x64, 0xC0, 0xBB, 0x9F, \
0x3E, 0x9A, 0xAE, 0xC9, 0xEA, 0xF4, 0xDE, 0x1F, 0x46, 0xFE, 0x3C, 0xB1, 0x7C, 0xBB, 0x25, 0xB3, \
0xE2, 0x54, 0x75, 0x55, 0x21, 0x13, 0xEB, 0xE3, 0xE6, 0xCE, }

// Checksum
#define SK_TEST_X509_KEY_CSUM { \
0x50, 0x9B, 0x03, 0x49, 0x9C, 0x7C, 0xFD, 0x1E, 0x00, 0xBE, 0xE0, 0x8E, 0x10, 0xAC, 0x7C, 0xE3, \
0x69, 0x3F, 0xB4, 0x1C, 0x6F, 0x20, 0x03, 0x6D, 0xA4, 0x82, 0x67, 0x70, 0xA5, 0xD9, 0x8E, 0x0A, \
}


// X509 test 1 DER certificate
#define SK_TEST1_X509_CERT { \
0x7E, 0x30, 0x8F, 0x52, 0x5F, 0x68, 0xA6, 0xFF, 0x0A, 0xE3, 0x51, 0x74, 0x2E, 0xE7, 0x8A, 0x13, \
0xDC, 0x79, 0x32, 0xAD, 0x41, 0x3D, 0xE8, 0xB5, 0x15, 0x0F, 0xFC, 0x64, 0x82, 0x40, 0x24, 0xD5, \
0x0C, 0xF6, 0x4E, 0xFE, 0x3F, 0x8F, 0xA6, 0x2B, 0xCE, 0xEA, 0xF1, 0x8C, 0x2E, 0x13, 0x42, 0x44, \
0x3E, 0xEB, 0x83, 0xCC, 0xBB, 0xED, 0x0D, 0xF8, 0x22, 0xD1, 0xE1, 0xA6, 0x70, 0xAE, 0x18, 0xB5, \
0xE2, 0x14, 0x7B, 0xD1, 0x2E, 0x8D, 0xC6, 0xE1, 0x15, 0x30, 0x6F, 0x84, 0x9B, 0x15, 0x50, 0x1D, \
0x04, 0x8F, 0x62, 0x9D, 0x11, 0xDA, 0x48, 0xF4, 0x7D, 0x2F, 0xE3, 0x5B, 0x78, 0xBC, 0xF5, 0xE7, \
0xEE, 0xAF, 0x8E, 0x51, 0xC0, 0x71, 0x05, 0x8B, 0x61, 0xAC, 0xD7, 0xBA, 0x02, 0xEA, 0xC6, 0x5D, \
0x99, 0xC6, 0x58, 0x8A, 0x67, 0xD2, 0x9F, 0x70, 0x20, 0xB3, 0xC7, 0xFA, 0x8D, 0xA4, 0xB2, 0xF8, \
0xA4, 0xDD, 0x76, 0x1B, 0xDB, 0xB1, 0xC8, 0xC1, 0xE3, 0x45, 0x21, 0xE1, 0x80, 0x77, 0xC2, 0x1C, \
0x00, 0x08, 0x6D, 0xF0, 0x47, 0x1C, 0x03, 0x3C, 0x94, 0xB7, 0xFB, 0xD4, 0x39, 0xD2, 0x5F, 0x7E, \
0x0E, 0x4A, 0x61, 0x7E, 0x10, 0x06, 0xD9, 0xA5, 0x76, 0xB1, 0xF7, 0xA7, 0xC0, 0xE4, 0xB1, 0x20, \
0x48, 0xE8, 0xCD, 0xCF, 0x96, 0xE7, 0xED, 0x83, 0xA4, 0xB8, 0x46, 0x68, 0x28, 0xE5, 0xDA, 0x37, \
0xA0, 0x8F, 0x4E, 0x52, 0x2F, 0x6C, 0x18, 0x68, 0x20, 0x53, 0xA9, 0x85, 0x15, 0x88, 0x37, 0x83, \
0x8C, 0x74, 0xED, 0xFD, 0xF4, 0x72, 0x7D, 0x15, 0xCB, 0xED, 0x90, 0x76, 0xF9, 0x99, 0x1B, 0x65, \
0x43, 0xBA, 0x04, 0xF5, 0xBF, 0x4F, 0x09, 0xEC, 0xA3, 0x67, 0xA4, 0x76, 0xC5, 0x0B, 0x51, 0x17, \
0xDC, 0x49, 0xAB, 0x3B, 0x22, 0x30, 0x6F, 0x02, 0xF0, 0x61, 0x79, 0x8F, 0x10, 0x5A, 0xF8, 0xE1, \
0x0A, 0x66, 0x5F, 0x84, 0xC3, 0xCE, 0x42, 0xAE, 0xC2, 0xDE, 0xB6, 0x9C, 0x43, 0xF7, 0xA3, 0x10, \
0x07, 0xFF, 0x05, 0x41, 0x6E, 0xC6, 0xAF, 0x84, 0xB1, 0xAA, 0x5D, 0x87, 0xAB, 0x29, 0xB9, 0x3B, \
0x31, 0xF4, 0x63, 0x8D, 0x27, 0x5C, 0xDF, 0xA8, 0x14, 0x35, 0xA3, 0xDD, 0x01, 0xA2, 0xB0, 0xF1, \
0x33, 0x78, 0x09, 0x40, 0x2F, 0x15, 0xB4, 0x2D, 0x53, 0xFC, 0x75, 0x4F, 0xCF, 0xDB, 0xDA, 0x24, \
0x2D, 0x5A, 0x14, 0x38, 0x35, 0x61, 0xDC, 0x89, 0x96, 0xC0, 0x54, 0x0C, 0xBE, 0xA3, 0x92, 0x9E, \
0x60, 0xE8, 0x39, 0xE8, 0x3B, 0x8E, 0x1A, 0x26, 0x2E, 0x20, 0x0B, 0x42, 0x1D, 0xE9, 0xBE, 0x53, \
0x1A, 0xC8, 0x86, 0x8A, 0xD6, 0xE2, 0x15, 0x74, 0x51, 0x81, 0x27, 0x5B, 0xC6, 0x8F, 0x34, 0xB0, \
0x82, 0x98, 0x90, 0x16, 0x51, 0xAA, 0x59, 0xFC, 0x3F, 0x5A, 0xFA, 0x05, 0x8B, 0x67, 0x0A, 0xA1, \
0xDA, 0x6A, 0x3A, 0x51, 0xF2, 0x8A, 0x8D, 0xA0, 0xD0, 0xF7, 0x52, 0xED, 0x34, 0xAE, 0xF0, 0x85, \
0x6C, 0x64, 0x61, 0x15, 0x3C, 0xF5, 0x96, 0xC1, 0x1F, 0x01, 0xF4, 0x10, 0x0D, 0x95, 0xC4, 0xDB, \
0x62, 0x8F, 0x6F, 0x6F, 0xE7, 0x36, 0x62, 0x84, 0x21, 0xF7, 0xED, 0xAA, 0x9D, 0xAF, 0xDC, 0x72, \
0x03, 0xBC, 0x9C, 0xEE, 0xF5, 0xB0, 0x36, 0x04, 0x95, 0x75, 0xF6, 0xA8, 0x67, 0x3B, 0x79, 0xD7, \
0xA6, 0x51, 0x5D, 0xFF, 0xED, 0x36, 0x60, 0x28, 0x6A, 0x7F, 0x7F, 0x8A, 0x0B, 0x85, 0x33, 0x44, \
0x5C, 0x47, 0xD4, 0x90, 0x9A, 0x8C, 0xD9, 0x25, 0xE6, 0x88, 0xB3, 0x29, 0x46, 0x48, 0xE1, 0xF1, \
0x03, 0x40, 0x60, 0x42, 0xF4, 0x74, 0xD8, 0xAD, 0xD7, 0x4A, 0x3C, 0x30, 0xC0, 0xD6, 0xF1, 0x03, \
0xA7, 0x0C, 0xDA, 0x6E, 0xDB, 0x4B, 0x87, 0x95, 0x11, 0x89, 0x60, 0x80, 0xD9, 0x5C, 0x53, 0x75, \
0x96, 0x57, 0x4D, 0x1D, 0x6F, 0x75, 0xE2, 0x99, 0x0B, 0x22, 0x3E, 0x62, 0x9F, 0x5D, 0xBB, 0x1D, \
0x22, 0x71, 0x92, 0xE9, 0x5A, 0x45, 0xCF, 0xB8, 0x26, 0x9B, 0xF0, 0x5C, 0xE3, 0x68, 0xD1, 0x0A, \
0xCD, 0xCF, 0x5E, 0x76, 0x07, 0xE4, 0x7A, 0x35, 0x9B, 0x10, 0x2F, 0xB3, 0x73, 0x45, 0xF7, 0x9C, \
0xF5, 0x16, 0x7A, 0x6E, 0x7B, 0x82, 0x9E, 0x0D, 0xBC, 0x8C, 0x83, 0xDF, }

// Size
#define SK_TEST1_X509_CERT_SIZE (572)

// Mask
#define SK_TEST1_X509_CERT_MASK { \
0x4E, 0xB2, 0x8D, 0x6A, 0x6F, 0xEA, 0xA7, 0x21, 0xAA, 0xE0, 0x53, 0x75, 0x2C, 0xE5, 0x9E, 0x44, \
0x1F, 0x5B, 0x34, 0xE5, 0x99, 0x97, 0x52, 0xC8, 0x90, 0x81, 0xE6, 0x7E, 0xC0, 0x5F, 0xF4, 0xF2, \
0x4A, 0xE8, 0x0A, 0xCE, 0x35, 0x89, 0xAE, 0x01, 0x48, 0xA2, 0x3F, 0xB1, 0x2A, 0x10, 0x40, 0x74, \
0xBF, 0x7B, 0xB2, 0xC7, 0x8B, 0xE4, 0x0B, 0xFB, 0x77, 0xD5, 0xE7, 0xB5, 0x72, 0xED, 0x59, 0x84, \
0xE9, 0x24, 0x72, 0xD7, 0x2D, 0xD8, 0xC2, 0xE9, 0x19, 0x32, 0x20, 0xCA, 0xAA, 0x1A, 0x60, 0x10, \
0x02, 0x8C, 0x37, 0x99, 0x16, 0xD6, 0x4E, 0xBB, 0x09, 0x5B, 0x82, 0x2C, 0x19, 0x8D, 0xD1, 0xD7, \
0xCC, 0xA9, 0x8D, 0x04, 0xC4, 0x7B, 0x09, 0x90, 0x22, 0xEE, 0x93, 0xF9, 0x22, 0xAC, 0xAF, 0x33, \
0xED, 0xA3, 0x3B, 0xE2, 0x47, 0x80, 0xFA, 0x03, 0x45, 0xD2, 0xB5, 0x99, 0xE5, 0x84, 0xF5, 0x8A, \
0xCB, 0xA8, 0x06, 0x2A, 0xC6, 0x81, 0xD3, 0xC7, 0xE0, 0x10, 0x25, 0xE2, 0x8C, 0x63, 0x81, 0x5D, \
0x2D, 0x4B, 0x2F, 0xB4, 0x04, 0x31, 0x45, 0x75, 0xDA, 0xE3, 0xBE, 0x97, 0x71, 0xFF, 0x0D, 0x31, \
0x41, 0x1E, 0x50, 0x60, 0x20, 0x1A, 0xDF, 0xAC, 0x5C, 0x37, 0xBF, 0x21, 0x37, 0xE9, 0xB0, 0x29, \
0x49, 0xFE, 0xC2, 0xAC, 0xF4, 0x83, 0x8E, 0xAE, 0xC2, 0xD1, 0x28, 0x1C, 0x4D, 0x86, 0xB2, 0x19, \
0xC3, 0xEE, 0x7E, 0x4C, 0x38, 0x61, 0x2A, 0x5B, 0x10, 0x66, 0x9A, 0xB4, 0x24, 0xBC, 0x04, 0xB2, \
0xB8, 0x4D, 0xB7, 0xEA, 0xF9, 0x41, 0x4E, 0x25, 0xFE, 0xDF, 0xA8, 0x47, 0xCD, 0xAA, 0x2A, 0x51, \
0x7A, 0xE0, 0x34, 0x74, 0x2E, 0x7E, 0x02, 0xDC, 0xAA, 0x61, 0xA7, 0x23, 0xC1, 0x0D, 0x42, 0x15, \
0x9F, 0x08, 0x9A, 0x30, 0x12, 0x39, 0x69, 0x01, 0xA5, 0x65, 0x71, 0x83, 0x12, 0x15, 0xB6, 0xD0, \
0x05, 0x56, 0x52, 0x82, 0xC0, 0x9B, 0x46, 0xA9, 0xCE, 0xD8, 0xF9, 0xE8, 0x37, 0x96, 0xD4, 0x71, \
0x36, 0xDB, 0x35, 0x63, 0x68, 0xC5, 0xFA, 0x80, 0xBB, 0xA6, 0x46, 0xC4, 0xE9, 0x6D, 0xFA, 0x1B, \
0x77, 0x9D, 0x0D, 0xF9, 0x42, 0x3F, 0xB7, 0x88, 0x46, 0x50, 0xD0, 0xB8, 0x60, 0xD0, 0xD3, 0x99, \
0x13, 0x3F, 0x7B, 0x2F, 0x5A, 0x65, 0x85, 0x33, 0x63, 0xE0, 0x73, 0x4C, 0x9A, 0xDF, 0xD9, 0x28, \
0x38, 0x19, 0x55, 0x15, 0x76, 0x23, 0x98, 0xCA, 0xBB, 0x86, 0x1D, 0x42, 0xEA, 0xE6, 0xD1, 0xD6, \
0x4D, 0xBC, 0x7C, 0xBB, 0x6F, 0xBF, 0x2B, 0x38, 0x1E, 0x3C, 0x0D, 0x4B, 0x37, 0x6F, 0xF6, 0xD5, \
0xED, 0xC5, 0x87, 0x83, 0xD7, 0xF4, 0x1A, 0x17, 0x33, 0xE5, 0x44, 0x76, 0xA0, 0xE6, 0x5A, 0xC4, \
0xE7, 0xFB, 0xF8, 0x38, 0x32, 0xCB, 0x69, 0xA5, 0x0F, 0x49, 0xFC, 0x02, 0xA1, 0xE1, 0x42, 0x6F, \
0xE7, 0x68, 0x3B, 0x57, 0xFA, 0xA0, 0x0B, 0xE8, 0x1E, 0xCA, 0x51, 0xEC, 0x33, 0xAD, 0xB2, 0x85, \
0x68, 0x19, 0x29, 0x5D, 0x05, 0x5D, 0xE3, 0x39, 0xEA, 0xD5, 0xF3, 0xFA, 0x5D, 0x8D, 0xDB, 0x23, \
0x29, 0x40, 0x29, 0xAB, 0x99, 0xC0, 0xBB, 0x9D, 0x3A, 0xA6, 0xF2, 0x41, 0x53, 0x7A, 0x8C, 0x6C, \
0x9C, 0x0F, 0xE6, 0xC8, 0xF8, 0xA8, 0x08, 0x78, 0x2D, 0x05, 0x00, 0xB8, 0xE4, 0x2E, 0x93, 0x5D, \
0x7A, 0x3D, 0xC6, 0xA0, 0xD0, 0xA4, 0x18, 0xAA, 0x2D, 0xB1, 0x0B, 0x2D, 0x6A, 0xD4, 0x09, 0x0C, \
0x86, 0xE4, 0xC7, 0xA0, 0x8B, 0xBC, 0xD6, 0x23, 0xE5, 0xDD, 0xAE, 0x3A, 0x47, 0x49, 0x1E, 0xF5, \
0x06, 0x70, 0x63, 0x43, 0xF5, 0x8B, 0xE8, 0xA7, 0xD1, 0x42, 0x16, 0xB6, 0x88, 0x18, 0xCC, 0x07, \
0xA4, 0x0E, 0xD9, 0x26, 0xDB, 0x7B, 0xC2, 0x97, 0x31, 0xB0, 0xAF, 0xA2, 0x14, 0x38, 0x4E, 0x37, \
0x81, 0x4E, 0x24, 0xD7, 0x46, 0x4D, 0xA1, 0x2F, 0xDD, 0x9F, 0x8A, 0xC9, 0xC4, 0xB2, 0xBC, 0xBE, \
0x75, 0x64, 0x4B, 0x7A, 0xAA, 0x85, 0xBB, 0xC1, 0xF3, 0x99, 0xD1, 0x5C, 0x05, 0x5D, 0x9E, 0xF2, \
0xA0, 0x0A, 0x59, 0x3F, 0x3B, 0x02, 0x03, 0x59, 0x7C, 0x47, 0x3B, 0x51, 0xFD, 0x27, 0x3C, 0x86, \
0x04, 0xC1, 0x3B, 0x29, 0xF0, 0x53, 0xAD, 0x19, 0xC3, 0x30, 0x11, 0x91, }

// Checksum
#define SK_TEST1_X509_CERT_CSUM { \
0x44, 0x94, 0xC0, 0xE0, 0x32, 0xE6, 0x52, 0xE6, 0x5D, 0x73, 0xD7, 0x3A, 0xE4, 0x93, 0x29, 0x18, \
0x5A, 0x23, 0x44, 0xFE, 0x52, 0x4D, 0x5D, 0x7B, 0xD3, 0x07, 0x8A, 0x30, 0x50, 0xAA, 0xBE, 0x6C, \
}


// X509 test 1 DER private key
#define SK_TEST1_X509_KEY { \
0xE4, 0xF9, 0xB6, 0x84, 0xA9, 0x39, 0xCC, 0xE0, 0x80, 0x8C, 0x8C, 0x69, 0xA9, 0x4B, 0x46, 0xE0, \
0x25, 0x12, 0x28, 0x34, 0xC5, 0x13, 0x88, 0xA2, 0x35, 0xF1, 0x6B, 0x07, 0xEC, 0x35, 0xC0, 0x5B, \
0xC5, 0xFC, 0xD8, 0x5F, 0x14, 0x73, 0x8E, 0xFE, 0x2F, 0x3A, 0xB9, 0xC8, 0x72, 0x2F, 0x02, 0x89, \
0xA9, 0x77, 0x36, 0x14, 0xFC, 0xA8, 0xF4, 0x14, 0xEF, 0xA5, 0x4D, 0x8F, 0x72, 0x2E, 0x6C, 0x09, \
0xFA, 0x84, 0x68, 0xF9, 0x6F, 0xA6, 0xF0, 0x43, 0x04, 0xE4, 0x44, 0x3E, 0xA8, 0x19, 0xB6, 0x16, \
0xCF, 0x42, 0xC5, 0x90, 0x61, 0x44, 0x10, 0x9E, 0x81, 0xBB, 0x5C, 0xCD, 0x1A, 0xAC, 0x86, 0xA8, \
0x64, 0x07, 0x45, 0x55, 0x5A, 0x36, 0x75, 0x7E, 0x92, 0xFA, 0x28, 0x16, 0x0D, 0x7F, 0x48, 0x30, \
0xF1, 0x57, 0xE7, 0x0F, 0x53, 0xB9, 0x88, 0x7E, 0x0A, 0x11, 0xFD, 0x05, 0xC8, 0xDE, 0x80, 0xA7, \
0x15, 0x0A, 0x61, 0x5D, 0xC6, 0xD2, 0xE9, 0xB4, 0x01, 0x82, }

// Size
#define SK_TEST1_X509_KEY_SIZE (138)

// Mask
#define SK_TEST1_X509_KEY_MASK { \
0xD4, 0x78, 0x31, 0x86, 0xA8, 0x39, 0xFC, 0xF3, 0x86, 0x8B, 0xA6, 0xEF, 0xE1, 0x85, 0x7B, 0xE2, \
0x24, 0x14, 0x20, 0x1E, 0x43, 0x5B, 0x46, 0x9F, 0x36, 0xF0, 0x6C, 0x03, 0x81, 0x05, 0xAB, 0x59, \
0xC4, 0xFD, 0xDC, 0x7F, 0xE2, 0xA8, 0x5A, 0x43, 0xD1, 0xC2, 0x51, 0x4D, 0xBB, 0x14, 0xFA, 0xBA, \
0x83, 0xE9, 0xDF, 0x6C, 0x7B, 0xA2, 0x58, 0xA5, 0xD1, 0x3D, 0x7A, 0x58, 0x68, 0x70, 0x0D, 0x0C, \
0x03, 0xCD, 0xBA, 0x4B, 0xCE, 0xE2, 0xF3, 0x01, 0x04, 0xE0, 0x39, 0x76, 0xE0, 0x20, 0x1E, 0x63, \
0x37, 0xB7, 0x11, 0x97, 0x8B, 0x14, 0x08, 0x81, 0x79, 0xF0, 0x93, 0x8B, 0xDE, 0xD2, 0x70, 0x71, \
0x7D, 0x1C, 0x14, 0x4A, 0xB1, 0xF8, 0xA0, 0x2E, 0x8C, 0x65, 0x9B, 0x6C, 0x2B, 0x72, 0x50, 0x0E, \
0x8D, 0xEF, 0x97, 0xF9, 0x43, 0x3A, 0x9D, 0x94, 0x80, 0xCD, 0x91, 0x9E, 0x97, 0xE3, 0x12, 0xDF, \
0x97, 0x4D, 0xAF, 0x29, 0x61, 0xB3, 0xB8, 0x8E, 0x49, 0x58, }

// Checksum
#define SK_TEST1_X509_KEY_CSUM { \
0xC6, 0x33, 0x29, 0x05, 0xF1, 0xEC, 0xFF, 0x4C, 0x21, 0xDF, 0x0F, 0x97, 0x38, 0x51, 0x66, 0xF4, \
0xAB, 0xB3, 0x98, 0xBA, 0xA3, 0xEC, 0x85, 0x94, 0x2D, 0x13, 0x97, 0x36, 0xB9, 0x9E, 0xC5, 0xBF, \
}


// X509 test 2 DER certificate
#define SK_TEST2_X509_CERT { \
0xD4, 0x19, 0x01, 0x7C, 0x87, 0x13, 0x6B, 0x18, 0xC5, 0x08, 0x47, 0x90, 0xC2, 0xA9, 0xC2, 0x93, \
0x64, 0x8C, 0x4F, 0xDC, 0xE2, 0x53, 0xDB, 0x59, 0x3C, 0x28, 0x11, 0xAB, 0xAC, 0x83, 0x95, 0xD5, \
0xFB, 0x15, 0xF9, 0x26, 0x96, 0xEC, 0xA1, 0x90, 0x14, 0x78, 0x27, 0x15, 0x86, 0x76, 0x76, 0x20, \
0x27, 0x37, 0x61, 0xC4, 0xC9, 0x01, 0xED, 0x75, 0xD4, 0xD5, 0xF7, 0xE5, 0xF2, 0xA3, 0x04, 0x69, \
0x33, 0xFD, 0x34, 0x02, 0x76, 0xC6, 0x1D, 0x59, 0xD6, 0xC6, 0x0B, 0xD6, 0xE7, 0x1E, 0x55, 0xA1, \
0xA6, 0x64, 0x31, 0xAC, 0xA9, 0x50, 0xAC, 0x6F, 0x05, 0xD7, 0x56, 0x82, 0xA3, 0xAB, 0xEC, 0xD5, \
0xF3, 0x0C, 0x29, 0x7B, 0x4E, 0x0D, 0x3A, 0x25, 0x62, 0x59, 0x02, 0xA3, 0x89, 0xFF, 0x0B, 0xE2, \
0xCD, 0xD7, 0x77, 0x14, 0x0A, 0x86, 0x3A, 0x01, 0x01, 0x9B, 0x11, 0x19, 0xCD, 0x29, 0x31, 0x22, \
0x6D, 0x53, 0x34, 0x26, 0x4A, 0x95, 0x1C, 0xDD, 0x5D, 0x55, 0x94, 0xBC, 0xC9, 0x17, 0xD7, 0xF6, \
0xBB, 0xF3, 0xB7, 0x94, 0x0C, 0x95, 0x56, 0x83, 0x41, 0xF7, 0xE6, 0xC1, 0x72, 0x53, 0xEB, 0x0A, \
0x76, 0xA5, 0x3A, 0x2B, 0xBC, 0x12, 0x03, 0xDC, 0xD1, 0x48, 0x12, 0x21, 0xBA, 0x2A, 0x7C, 0x41, \
0x30, 0x96, 0x1E, 0xEE, 0x79, 0xE0, 0x6A, 0xAD, 0x39, 0x6F, 0x06, 0x1B, 0x06, 0xF0, 0xE3, 0x6A, \
0xC6, 0x15, 0x6F, 0x0C, 0x3B, 0xE8, 0xCE, 0x7F, 0x88, 0xD7, 0xB8, 0x73, 0x03, 0x8F, 0x19, 0x66, \
0x67, 0x45, 0xA0, 0xFA, 0x2F, 0xA1, 0x77, 0xC8, 0x7E, 0x8E, 0x4C, 0x05, 0x8E, 0x91, 0x05, 0xDF, \
0x3D, 0xE4, 0x67, 0x32, 0xF0, 0xE7, 0x2A, 0x42, 0xA7, 0xB3, 0x00, 0x4F, 0x55, 0x47, 0x8E, 0xA5, \
0x63, 0x7B, 0x4C, 0x28, 0x87, 0x1B, 0xF1, 0xF1, 0x9B, 0x76, 0xF5, 0x3E, 0x99, 0x38, 0x59, 0x59, \
0x1D, 0xFC, 0xE8, 0x44, 0xAC, 0x3C, 0x90, 0xA3, 0xE6, 0x0E, 0x73, 0xE8, 0x5F, 0x1C, 0x3C, 0xD1, \
0xFA, 0x8B, 0xB8, 0x52, 0x44, 0xCE, 0xCC, 0x2A, 0xAD, 0x29, 0xEB, 0x4C, 0xD1, 0xD5, 0x7C, 0xB1, \
0xB3, 0xBD, 0x59, 0xA5, 0x2A, 0x03, 0xB4, 0x28, 0xDF, 0xBD, 0x34, 0xD0, 0xAA, 0xCC, 0xA9, 0xCF, \
0x8B, 0x3E, 0x77, 0x7D, 0xF8, 0x2C, 0x62, 0x49, 0x62, 0x42, 0x0F, 0x0B, 0xC6, 0xCD, 0x6E, 0xF5, \
0xC5, 0xE1, 0xD2, 0x6C, 0x9B, 0x26, 0xD3, 0xF8, 0xE3, 0x34, 0x30, 0xC4, 0x32, 0xA1, 0x56, 0x88, \
0x00, 0xAB, 0x11, 0x83, 0x3C, 0x34, 0xD4, 0x83, 0x00, 0xA2, 0x26, 0x2C, 0x98, 0xE2, 0xE7, 0xC5, \
0xA6, 0xF4, 0xDA, 0x55, 0x8B, 0x16, 0xE8, 0xD3, 0xAC, 0xEA, 0x93, 0x1C, 0x9E, 0x29, 0x04, 0x2F, \
0x7B, 0x64, 0x04, 0x2A, 0x8D, 0x24, 0x27, 0xA6, 0x46, 0xD9, 0xEC, 0x78, 0x0B, 0xAC, 0x80, 0xC5, \
0xAD, 0x78, 0x96, 0x7D, 0x41, 0xF8, 0xE0, 0x6C, 0x4C, 0x53, 0x7D, 0x6A, 0xB6, 0x22, 0x77, 0x63, \
0x2F, 0x85, 0xBF, 0x78, 0xD2, 0x9E, 0x06, 0xD7, 0xEA, 0x41, 0x1A, 0xE8, 0x08, 0x10, 0x35, 0x73, \
0x91, 0x62, 0xA9, 0xF3, 0x4B, 0xDB, 0x0A, 0xB9, 0x98, 0x45, 0xC2, 0x3F, 0x47, 0x83, 0xED, 0xF0, \
0x43, 0xD4, 0xD3, 0x73, 0x3D, 0x3D, 0x04, 0x85, 0xD8, 0x4A, 0xD5, 0x6B, 0xDF, 0xC0, 0x61, 0xE8, \
0x9E, 0xED, 0xEF, 0x18, 0xD3, 0xDC, 0x3D, 0xFF, 0x23, 0x67, 0x1B, 0x20, 0x9A, 0x00, 0xFC, 0x46, \
0xF4, 0xDD, 0x6D, 0x79, 0x60, 0x93, 0x87, 0xED, 0x96, 0xE2, 0xDF, 0x87, 0xA5, 0x63, 0xC9, 0x89, \
0x1D, 0x4F, 0xEF, 0x5A, 0xEE, 0xA6, 0xB0, 0x5E, 0x8A, 0x30, 0x7E, 0x54, 0xA8, 0x60, 0xA5, 0x85, \
0xE6, 0x44, 0x1E, 0xD9, 0x0D, 0x40, 0x55, 0x44, 0x92, 0x1C, 0x14, 0xE2, 0xBC, 0x1C, 0x55, 0xFF, \
0xCB, 0xDF, 0xA1, 0x87, 0x73, 0xAC, 0x15, 0x6B, 0x88, 0xA7, 0x90, 0x6D, 0xBE, 0x4F, 0xC9, 0x98, \
0x1C, 0xC0, 0xBC, 0xF0, 0x94, 0xCA, 0x2D, 0x24, 0xB4, 0xF1, 0x79, 0xFE, 0xED, 0xF0, 0xF0, 0x19, \
0x0D, 0xCB, 0x71, 0x5F, 0x2E, 0xCF, 0xB5, 0x8B, 0xCC, 0x17, 0x29, 0xB2, 0x93, 0xA1, 0x8A, 0xBF, \
0x88, 0x6F, 0x25, 0x68, 0xB2, 0x3A, 0x0C, 0xFA, 0x9A, 0xB9, 0x62, 0x56, }

// Size
#define SK_TEST2_X509_CERT_SIZE (572)

// Mask
#define SK_TEST2_X509_CERT_MASK { \
0xE4, 0x9B, 0x03, 0x44, 0xB7, 0x91, 0x6A, 0xC6, 0x65, 0x0B, 0x45, 0x91, 0xC0, 0xAB, 0xD6, 0xC4, \
0xA7, 0xAE, 0x49, 0x94, 0x3A, 0xF9, 0x61, 0x24, 0xB9, 0xA6, 0x0B, 0xB1, 0xEE, 0x9C, 0x45, 0xF2, \
0xBD, 0x0B, 0xBD, 0x16, 0x9C, 0xEA, 0xA9, 0xBA, 0x92, 0x30, 0xE9, 0x28, 0x82, 0x75, 0x74, 0x10, \
0xA6, 0xA7, 0x50, 0xCF, 0xF9, 0x08, 0xEB, 0x76, 0x81, 0xD1, 0xF1, 0xF6, 0xF0, 0xE0, 0x45, 0x58, \
0x38, 0xCD, 0x3D, 0x04, 0x75, 0x93, 0x19, 0x51, 0xDA, 0xC4, 0x44, 0x98, 0xD6, 0x11, 0x65, 0xAC, \
0xA0, 0x67, 0x64, 0xA8, 0xAE, 0x5C, 0xAA, 0x20, 0x71, 0xA3, 0x37, 0xF5, 0xC2, 0x9A, 0xC8, 0xE5, \
0xD1, 0x0A, 0x2A, 0x2E, 0x4A, 0x07, 0x36, 0x3E, 0x21, 0x1B, 0x46, 0xE0, 0xA9, 0xB9, 0x62, 0x8C, \
0xB9, 0xB2, 0x14, 0x7C, 0x2A, 0xD4, 0x5F, 0x72, 0x64, 0xFA, 0x63, 0x7A, 0xA5, 0x09, 0x76, 0x50, \
0x02, 0x26, 0x44, 0x17, 0x57, 0xA5, 0x07, 0xDB, 0x5E, 0x00, 0x90, 0xBF, 0xC5, 0x03, 0x94, 0xB7, \
0x96, 0xB0, 0xF5, 0xD0, 0x4F, 0xB8, 0x10, 0xCA, 0x0F, 0xA3, 0xA3, 0x82, 0x3A, 0x7E, 0xB9, 0x45, \
0x39, 0xF1, 0x0B, 0x35, 0x8C, 0x0E, 0x05, 0xD5, 0xFB, 0xCE, 0x5A, 0xA7, 0x4D, 0x27, 0x7D, 0x48, \
0x31, 0x80, 0x11, 0x8D, 0x1B, 0x84, 0x09, 0x80, 0x5F, 0x06, 0x68, 0x6F, 0x63, 0x93, 0x8B, 0x44, \
0xA5, 0x74, 0x5F, 0x12, 0x2C, 0xE5, 0xFC, 0x4C, 0xB8, 0xE2, 0x8B, 0x42, 0x32, 0xBB, 0x2A, 0x57, \
0x53, 0x7C, 0xFA, 0xED, 0x22, 0x92, 0x44, 0xF8, 0x4B, 0xBC, 0x74, 0x34, 0xBA, 0xA2, 0x34, 0xEB, \
0x04, 0xBE, 0x57, 0xB3, 0x61, 0xD6, 0x21, 0x72, 0xAE, 0xB5, 0x03, 0x1A, 0x51, 0x41, 0x9D, 0xA7, \
0x20, 0x3A, 0x7D, 0x23, 0xB7, 0x12, 0xF7, 0xF2, 0xCE, 0x72, 0xFD, 0x32, 0x9B, 0x77, 0x17, 0x68, \
0x12, 0xCC, 0xE5, 0x42, 0xAF, 0x69, 0x94, 0xA4, 0xEA, 0x08, 0x3C, 0x9C, 0x2B, 0x7D, 0x4B, 0xB0, \
0xCB, 0xAF, 0x88, 0x70, 0x42, 0xCD, 0x99, 0x2E, 0xA7, 0x25, 0xF0, 0x0F, 0x93, 0x91, 0x3F, 0x91, \
0xF5, 0xD4, 0x37, 0xD1, 0x4F, 0x60, 0xDC, 0x08, 0x8D, 0xD8, 0x47, 0xB5, 0xCB, 0xBE, 0xCA, 0xA7, \
0xAB, 0x79, 0x05, 0x12, 0x8D, 0x5C, 0x53, 0x57, 0x52, 0x5E, 0x09, 0x08, 0x93, 0xC9, 0x6D, 0xF9, \
0xD0, 0xA2, 0x93, 0x41, 0xD8, 0x64, 0x97, 0xBB, 0xCE, 0x72, 0x79, 0x8A, 0x66, 0xE4, 0x15, 0xC0, \
0x2D, 0xFF, 0x54, 0xD0, 0x68, 0x05, 0xE5, 0x9D, 0x30, 0xBE, 0x20, 0x25, 0xB2, 0x64, 0xAF, 0x43, \
0x51, 0xF9, 0xDB, 0x5C, 0x8A, 0x00, 0xE7, 0xB0, 0xCE, 0x8E, 0xF0, 0x31, 0xF8, 0x40, 0x6A, 0x5B, \
0x1E, 0x07, 0x6C, 0x04, 0xEE, 0x45, 0x17, 0xFF, 0x76, 0xCA, 0xEA, 0x7F, 0x21, 0x2A, 0xC8, 0x0B, \
0x90, 0x7A, 0x97, 0x7B, 0x49, 0xD2, 0x66, 0x24, 0x82, 0x6E, 0x7E, 0x6B, 0xB1, 0x21, 0x35, 0x63, \
0x2B, 0xF8, 0xF7, 0x30, 0xEB, 0x36, 0x73, 0x2F, 0x1F, 0x95, 0x1D, 0x02, 0x58, 0x08, 0x2A, 0x8B, \
0xDA, 0xAD, 0xEF, 0x37, 0x35, 0x2D, 0xD3, 0xA0, 0x83, 0x14, 0xDD, 0xD4, 0x89, 0x56, 0xBD, 0xEE, \
0xDC, 0x67, 0xA9, 0x55, 0x30, 0x25, 0x3A, 0xF9, 0x60, 0x3A, 0x23, 0x7B, 0x5C, 0xD5, 0x8B, 0x62, \
0x42, 0x81, 0x74, 0x47, 0xEE, 0x4E, 0x45, 0x7D, 0x64, 0xA9, 0x6F, 0x87, 0xFB, 0x51, 0xC6, 0x0E, \
0x2E, 0x7E, 0x7E, 0x49, 0x71, 0xA3, 0x88, 0xEB, 0x95, 0xB7, 0xC2, 0x94, 0xA4, 0x62, 0x36, 0x8D, \
0x18, 0x7F, 0xEC, 0x5B, 0xEF, 0x59, 0x80, 0x54, 0x8C, 0x38, 0x54, 0xD2, 0xE0, 0xAE, 0x98, 0x81, \
0xE5, 0x46, 0x1D, 0x91, 0x0D, 0x70, 0x10, 0x46, 0xB2, 0x25, 0xDB, 0xC0, 0x71, 0x78, 0x48, 0xBD, \
0xDC, 0xC6, 0xC8, 0x4D, 0x5A, 0x94, 0x56, 0xDD, 0x5E, 0x1A, 0x24, 0xC6, 0xE5, 0xA0, 0xCE, 0x3B, \
0x4B, 0xD5, 0x65, 0x63, 0x64, 0x0A, 0x59, 0x5D, 0x61, 0xF3, 0x58, 0xFE, 0x0B, 0xC5, 0xBF, 0xE1, \
0x60, 0x0E, 0x76, 0x16, 0x12, 0x29, 0xCC, 0xE7, 0x2B, 0x40, 0x3D, 0x50, 0x1D, 0xC3, 0x41, 0xA5, \
0x79, 0xB8, 0x64, 0x2F, 0x39, 0xEB, 0x3F, 0xEE, 0xE5, 0x05, 0xF0, 0x18, }

// Checksum
#define SK_TEST2_X509_CERT_CSUM { \
0x44, 0x94, 0xC0, 0xE0, 0x32, 0xE6, 0x52, 0xE6, 0x5D, 0x73, 0xD7, 0x3A, 0xE4, 0x93, 0x29, 0x18, \
0x5A, 0x23, 0x44, 0xFE, 0x52, 0x4D, 0x5D, 0x7B, 0xD3, 0x07, 0x8A, 0x30, 0x50, 0xAA, 0xBE, 0x6C, \
}


// X509 test 2 DER private key
#define SK_TEST2_X509_KEY { \
0xDC, 0x69, 0x84, 0x73, 0x1E, 0x2A, 0xE5, 0xFA, 0xA3, 0x86, 0x86, 0xAB, 0xBB, 0x97, 0x31, 0x23, \
0x5E, 0x4D, 0xCF, 0xC8, 0x98, 0xCC, 0xDF, 0xE8, 0xB6, 0x80, 0x5B, 0xDD, 0xB0, 0xE7, 0x2A, 0x01, \
0x91, 0x4D, 0x01, 0x13, 0xC6, 0x16, 0xF6, 0x3F, 0xCB, 0x01, 0xCE, 0xCF, 0x7A, 0x0D, 0x53, 0x06, \
0x06, 0x14, 0x00, 0x72, 0x14, 0x33, 0xE9, 0xCD, 0x77, 0x84, 0xAA, 0x84, 0xF4, 0x40, 0x4B, 0xB9, \
0x35, 0x6E, 0xEC, 0x6E, 0xA4, 0x9E, 0x2F, 0x2E, 0xC8, 0x38, 0x8E, 0x42, 0x9E, 0x9E, 0x24, 0x3F, \
0x2F, 0xF3, 0xCB, 0xE6, 0xD0, 0xB7, 0x86, 0x78, 0xBC, 0xBB, 0xE0, 0x3E, 0xEA, 0x19, 0x16, 0x96, \
0x5C, 0xFF, 0xB6, 0xBD, 0xA8, 0x40, 0xEC, 0x03, 0x5D, 0x1E, 0xD9, 0xAB, 0x79, 0x08, 0x90, 0xE4, \
0xEF, 0x8A, 0x88, 0x1F, 0x7F, 0x6D, 0x7B, 0x3D, 0x65, 0xEF, 0x7F, 0xDA, 0x18, 0xD8, 0x22, 0x52, \
0xEB, 0x89, 0xCF, 0x7E, 0xAC, 0x99, 0x8E, 0xED, 0x5F, 0xC2, }

// Size
#define SK_TEST2_X509_KEY_SIZE (138)

// Mask
#define SK_TEST2_X509_KEY_MASK { \
0xEC, 0xE8, 0x03, 0x71, 0x1F, 0x2A, 0xD5, 0xE9, 0xA5, 0x81, 0xAC, 0x2D, 0xF3, 0x59, 0x0C, 0x21, \
0x5F, 0x4B, 0xC7, 0xE2, 0x1E, 0x84, 0x11, 0xD5, 0xB5, 0x81, 0x5C, 0xD9, 0xDD, 0xD7, 0x41, 0x03, \
0x90, 0x4C, 0x05, 0x33, 0x30, 0xCD, 0x22, 0x82, 0x35, 0xF9, 0x26, 0x4A, 0xB3, 0x36, 0xAB, 0x35, \
0x2C, 0x8A, 0xE9, 0x0A, 0x93, 0x39, 0x45, 0x7C, 0x49, 0x1C, 0x9D, 0x53, 0xEE, 0x1E, 0x2A, 0xBC, \
0xCC, 0x27, 0x3E, 0xDC, 0x05, 0xDA, 0x2C, 0x6C, 0xC8, 0x3C, 0xF3, 0x0A, 0xD6, 0xA7, 0x8C, 0x4A, \
0xD7, 0x06, 0x1F, 0xE1, 0x3A, 0xE7, 0x9E, 0x67, 0x44, 0xF0, 0x2F, 0x78, 0x2E, 0x67, 0xE0, 0x4F, \
0x45, 0xE4, 0xE7, 0xA2, 0x43, 0x8E, 0x39, 0x53, 0x43, 0x81, 0x6A, 0xD1, 0x5F, 0x05, 0x88, 0xDA, \
0x93, 0x32, 0xF8, 0xE9, 0x6F, 0xEE, 0x6E, 0xD7, 0xEF, 0x33, 0x13, 0x41, 0x47, 0xE5, 0xB0, 0x2A, \
0x69, 0xCE, 0x01, 0x0A, 0x0B, 0xF8, 0xDF, 0xD7, 0x17, 0x18, }

// Checksum
#define SK_TEST2_X509_KEY_CSUM { \
0xC6, 0x33, 0x29, 0x05, 0xF1, 0xEC, 0xFF, 0x4C, 0x21, 0xDF, 0x0F, 0x97, 0x38, 0x51, 0x66, 0xF4, \
0xAB, 0xB3, 0x98, 0xBA, 0xA3, 0xEC, 0x85, 0x94, 0x2D, 0x13, 0x97, 0x36, 0xB9, 0x9E, 0xC5, 0xBF, \
}

