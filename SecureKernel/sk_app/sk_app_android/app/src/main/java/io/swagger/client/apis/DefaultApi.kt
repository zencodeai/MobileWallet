/**
 * MobileWalletPOT
 * Mobile Wallet POT backend API
 *
 * OpenAPI spec version: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
package io.swagger.client.apis

import io.swagger.client.models.BalanceInitData
import io.swagger.client.models.HTTPValidationError
import io.swagger.client.models.OnlineTransactionData
import io.swagger.client.models.ProcessingData
import io.swagger.client.models.ProvisioningData
import io.swagger.client.models.RequestSessionData

import io.swagger.client.infrastructure.*

class DefaultApi(basePath: kotlin.String = "/") : ApiClient(basePath) {

    /**
     * Init
     * 
     * @param body  
     * @return kotlin.Any
     */
    @Suppress("UNCHECKED_CAST")
    fun initApiV1InitPost(body: BalanceInitData): kotlin.Any {
        val localVariableBody: kotlin.Any? = body
        val localVariableConfig = RequestConfig(
                RequestMethod.POST,
                "/api/v1/init"
        )
        val response = request<kotlin.Any>(
                localVariableConfig, localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as kotlin.Any
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
        }
    }
    /**
     * Online
     * 
     * @param body  
     * @return kotlin.Any
     */
    @Suppress("UNCHECKED_CAST")
    fun onlineApiV1OnlinePost(body: OnlineTransactionData): kotlin.Any {
        val localVariableBody: kotlin.Any? = body
        val localVariableConfig = RequestConfig(
                RequestMethod.POST,
                "/api/v1/online"
        )
        val response = request<kotlin.Any>(
                localVariableConfig, localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as kotlin.Any
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
        }
    }
    /**
     * Process
     * 
     * @param body  
     * @return kotlin.Any
     */
    @Suppress("UNCHECKED_CAST")
    fun processApiV1ProcessPost(body: ProcessingData): kotlin.Any {
        val localVariableBody: kotlin.Any? = body
        val localVariableConfig = RequestConfig(
                RequestMethod.POST,
                "/api/v1/process"
        )
        val response = request<kotlin.Any>(
                localVariableConfig, localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as kotlin.Any
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
        }
    }
    /**
     * Provision
     * 
     * @param body  
     * @return kotlin.Any
     */
    @Suppress("UNCHECKED_CAST")
    fun provisionApiV1ProvisionPost(body: ProvisioningData): kotlin.Any {
        val localVariableBody: kotlin.Any? = body
        val localVariableConfig = RequestConfig(
                RequestMethod.POST,
                "/api/v1/provision"
        )
        val response = request<kotlin.Any>(
                localVariableConfig, localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as kotlin.Any
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
        }
    }
    /**
     * Session Data
     * 
     * @param body  
     * @return kotlin.Any
     */
    @Suppress("UNCHECKED_CAST")
    fun sessionDataApiV1SessionDataPost(body: RequestSessionData): kotlin.Any {
        val localVariableBody: kotlin.Any? = body
        val localVariableConfig = RequestConfig(
                RequestMethod.POST,
                "/api/v1/session_data"
        )
        val response = request<kotlin.Any>(
                localVariableConfig, localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as kotlin.Any
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
        }
    }
}
