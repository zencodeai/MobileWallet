
package com.example.sk_app

//
// Secure kernel native API constants
// This file is auto-generated by the sk_consts.py script
// Do not edit this file manually
// Generated on: 2023-09-11 15:43:30
//

// Placeholder
class SKConsts {}

//
// Error codes
//
enum class SKError(val _name: String, val _code: Long, val _category: String, val _description: String) {

    // Enum entries
    SkErrorFailed("SK_ERROR_FAILED", 3123159522, "SK_ERROR_CATEGORY_APPLICATION", "Generic error"),
    SkErrorInvalidState("SK_ERROR_INVALID_STATE", 2005430850, "SK_ERROR_CATEGORY_APPLICATION", "Invalid state"),
    SkErrorBufferOverflow("SK_ERROR_BUFFER_OVERFLOW", 2629191634, "SK_ERROR_CATEGORY_APPLICATION", "Buffer overflow"),
    SkErrorInvalidParameter("SK_ERROR_INVALID_PARAMETER", 1888625426, "SK_ERROR_CATEGORY_APPLICATION", "Invalid parameter"),
    SkErrorSqlite("SK_ERROR_SQLITE", 2209972438, "SK_ERROR_CATEGORY_STORE", "SQLite error"),
    SkErrorMbedtls("SK_ERROR_MBEDTLS", 2098142919, "SK_ERROR_CATEGORY_MTLS", "MBED TLS generic error"),
    SkErrorRnd("SK_ERROR_RND", 3032347409, "SK_ERROR_CATEGORY_SYSTEM", "Random error"),
    SkErrorTxList("SK_ERROR_TX_LIST", 2001060680, "SK_ERROR_CATEGORY_TX", "Transaction list error"),
    SkErrorTxChks("SK_ERROR_TX_CHKS", 2378961720, "SK_ERROR_CATEGORY_TX", "Invalid chacksum"),
    SkErrorTxSign("SK_ERROR_TX_SIGN", 2862703896, "SK_ERROR_CATEGORY_TX", "Failed to verify signature"),
    SkErrorTxAmnt("SK_ERROR_TX_AMNT", 3972490776, "SK_ERROR_CATEGORY_TX", "Invalid amount/balance in secure store"),
    SkErrorTxTime("SK_ERROR_TX_TIME", 2678362648, "SK_ERROR_CATEGORY_TX", "Invalid timestamp in secure store"),
    SkErrorTxPadd("SK_ERROR_TX_PADD", 1983294760, "SK_ERROR_CATEGORY_TX", "invalid data padding in secure store"),
    SkErrorCertParse("SK_ERROR_CERT_PARSE", 4152047353, "SK_ERROR_CATEGORY_CERT", "Failed to parse certificate"),
    SkErrorCrlParse("SK_ERROR_CRL_PARSE", 2432915673, "SK_ERROR_CATEGORY_CERT", "Certificate revocation list parse error"),
    SkErrorCertVerify("SK_ERROR_CERT_VERIFY", 3499746393, "SK_ERROR_CATEGORY_CERT", "Certificate chain verification failed"),
    SkErrorCertSign("SK_ERROR_CERT_SIGN", 3467999881, "SK_ERROR_CATEGORY_CERT", "Signature verification failed"),
    SkErrorOnlineInvalidState("SK_ERROR_ONLINE_INVALID_STATE", 2062490658, "SK_ERROR_CATEGORY_APPLICATION", "Invalid online state"),
    SkErrorOnlineNewtxState("SK_ERROR_ONLINE_NEWTX_STATE", 2653974714, "SK_ERROR_CATEGORY_SESSION", "Invalid new transaction state"),
    SkErrorStoreExists("SK_ERROR_STORE_EXISTS", 2140309210, "SK_ERROR_CATEGORY_SESSION", "Store already exists"),
    SkErrorInvalidProvData("SK_ERROR_INVALID_PROV_DATA", 3769684666, "SK_ERROR_CATEGORY_SESSION", "Invalid provisioning data"),
    SkErrorP2pMsg("SK_ERROR_P2P_MSG", 4041107338, "SK_ERROR_CATEGORY_SESSION", "Invalid P2P message"),
    SkErrorApi("SK_ERROR_API", 3791603938, "SK_ERROR_CATEGORY_APPLICATION", "Secure kernel API error");


    // Enum class arguments getters
    val valName: String get() = _name
    val valCode: Long get() = _code
    val valCategory: String get() = _category
    val valDescription: String get() = _description

    // Get enum form value
    companion object {
        fun fromValue(value: Long): SKError? {
            return values().find { it._code == value }
        }
    }
}

//
// Commands
//
enum class SKCommand(val _name: String, val _value: Long, val _description: String) {

    // Enum entries
    SkCmdStatus("SK_CMD_STATUS", 2161570808, "Get secure kernel status"),
    SkCmdOffline("SK_CMD_OFFLINE", 3915303988, "Set offline mode"),
    SkCmdOnline("SK_CMD_ONLINE", 2039589793, "Set online mode"),
    SkCmdTxOnline("SK_CMD_TX_ONLINE", 2809758020, "Start online transaction"),
    SkCmdTxOfflinePayor("SK_CMD_TX_OFFLINE_PAYOR", 2931349002, "Start offline P2P payor transaction"),
    SkCmdTxOfflinePayee("SK_CMD_TX_OFFLINE_PAYEE", 1921386420, "Start offline P2P payee transaction"),
    SkCmdProcessMsg("SK_CMD_PROCESS_MSG", 2035586668, "Process message"),
    SkCmdDecrypt("SK_CMD_DECRYPT", 3070170068, "Decrypt and verify signature of payload data using online session key");


    // Enum class arguments getters
    val valName: String get() = _name
    val valValue: Long get() = _value
    val valDescription: String get() = _description

    // Get enum form value
    companion object {
        fun fromValue(value: Long): SKCommand? {
            return values().find { it._value == value }
        }
    }
}

//
// States
//
enum class SKState(val _name: String, val _value: Long, val _description: String) {

    // Enum entries
    SkCtxInv("SK_CTX_INV", 3215180494, "Invalid state"),
    SkCtxError("SK_CTX_ERROR", 3426192913, "Error state"),
    SkCtxProv("SK_CTX_PROV", 3507772124, "Expecting provisioning data"),
    SkCtxInit("SK_CTX_INIT", 3689768552, "Expecting balance initialization"),
    SkCtxReady("SK_CTX_READY", 2221706663, "Ready for offline/online transactions");


    // Enum class arguments getters
    val valName: String get() = _name
    val valValue: Long get() = _value
    val valDescription: String get() = _description

    // Get enum form value
    companion object {
        fun fromValue(value: Long): SKState? {
            return values().find { it._value == value }
        }
    }
}
